// --- FIREBASE SDK IMPORTS ---
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-app.js";
import {
    getAuth,
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    signOut,
    onAuthStateChanged
} from "https://www.gstatic.com/firebasejs/11.8.1/firebase-auth.js";
import {
    getFirestore,
    collection,
    addDoc,
    doc,
    getDoc,
    getDocs,
    updateDoc,
    deleteDoc,
    query,
    where,
    serverTimestamp,
    onSnapshot,
    writeBatch
}
from "https://www.gstatic.com/firebasejs/11.8.1/firebase-firestore.js";
import { getAI, getGenerativeModel, GoogleAIBackend } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-ai.js";


// --- FIREBASE CONFIGURATION (S·ª≠ d·ª•ng gi√° tr·ªã t·ª´ file g·ªëc c·ªßa b·∫°n) ---
const firebaseConfig = {
    apiKey: "AIzaSyDLVuv2RGAJWUjhan-5oNCkGBwQZAN60aY",
    authDomain: "vocab-91599.firebaseapp.com",
    projectId: "vocab-91599",
    storageBucket: "vocab-91599.appspot.com",
    messagingSenderId: "918212044361",
    appId: "1:918212044361:web:50b7a065fe0b22b1924198"
};

// --- MODULE-SCOPED VARIABLES (Firebase, State, etc.) ---
let app;
let auth;
let db;
let ai;
let generativeModel;

let currentUser = null;
let currentMindMapId = null;
let currentKonvaStage = null;
let currentKonvaLayer = null;
let selectedKonvaNode = null;
let mindmapNodesUnsubscribe = null;
let allNodesDataForCurrentMap = [];
let mindmapDataUnsubscribe = null;
let tempCreationLine = null;
let rightClickedKonvaNode = null;
let isEditingText = false; // Used for modal editing state as well
let editingNodeIdForModal = null; // Stores ID of node being edited in modal

const DEFAULT_NODE_STYLE = {
    backgroundColor: "#e0e0e0", textColor: "#000000", borderColor: "#555555",
    shape: "rectangle",
    width: 150, minHeight: 50, padding: 10,
    cornerRadius: 5,
    fontSize: 14, fontFamily: 'Arial',
    icon: '',
    iconSize: 16,
    iconSpacing: 5,
    lineColor: "#888888", lineWidth: 3, lineDash: []
};
const MAX_DISPLAY_LINES_IN_NODE = 4;
let contextMenuJustOpened = false;

let potentiallyDraggedNode = null;
let dragStartPointerPosition = null;
const DRAG_THRESHOLD = 10;

let longPressTimeoutId = null;
let touchStartTargetNodeForContextMenu = null;
let touchStartPointerPositionForContextMenu = null;
const LONG_PRESS_DELAY = 750;
const LONG_PRESS_MOVE_THRESHOLD = 10;
let touchStartCoordsForLongPress = { x: 0, y: 0 };

const HANDLE_RADIUS = 8;
const HANDLE_FILL = 'rgba(0,180,0,0.7)';
const HANDLE_STROKE = 'rgba(0,100,0,0.9)';
const scaleBy = 1.1;

// NEW: Grid and Snap-to-Grid Variables
let isGridVisible = false;
let isSnapToGridEnabled = false;
let gridSize = 50; // Default grid size
let gridLines = []; // To store Konva Line objects for the grid


// --- DOM ELEMENT VARIABLES ---
let nodeStylePanel, nodeShapeSelect, nodeFontFamilySelect, nodeFontSizeInput, nodeIconSelect, nodeBgColorInput, nodeTextColorInput, nodeBorderColorInput, nodeLineColorInput, nodeLineDashSelect, nodeLineWidthInput;
let contextMenu, ctxAddChildButton, ctxEditTextButton, ctxViewFullContentButton, ctxSuggestChildrenButton, ctxExpandNodeButton, ctxGenerateExamplesButton, ctxAskAiNodeButton, ctxSummarizeBranchButton, ctxGenerateActionPlanButton, ctxDeleteNodeButton, ctxGenerateOutlineButton, ctxOptimizeLayoutButton; // NEW: ctxOptimizeLayoutButton
let aiLoadingIndicator, aiResponseModalOverlay, aiResponseModalTitle, aiResponseModalBody, aiResponseModalCloseButton;
let nodeContentModalOverlay, nodeContentModalTitle, nodeContentModalBody, nodeContentModalCloseButton;
let editNodeTextModalOverlay, editNodeTextModalTitle, editNodeTextarea, editNodeTextModalSaveButton, editNodeTextModalCancelButton, editNodeTextModalCloseButton; // NEW modal elements
let authSection, loginForm, registerForm, loginEmailInput, loginPasswordInput, loginButton, showRegisterLink, registerEmailInput, registerPasswordInput, registerButton, showLoginLink, loginErrorMsg, registerErrorMsg;
let mainAppSection, mainAppTitle, userEmailDisplay, logoutButton;
let mindmapManagementView, newMindmapTitleInput, createMindmapButton;
// Renamed mindmapListUl to normalMindmapListUl for clarity
let normalMindmapListUl, normalMindmapListLoading; // Renamed
// NEW: Variables for AI mindmap list
let aiMindmapListUl, aiMindmapListLoading;
let canvasView, backToMapsListButton, currentMindmapTitleDisplay, addChildNodeButton, deleteNodeButton, zoomInButton, zoomOutButton, resetZoomButton, konvaContainer, konvaContainerLoading;
let aiTextInput, generateMindmapFromTextButton, aiMindmapTitleInput; // NEW variables for AI from text
let toggleGridCheckbox, toggleSnapToGridCheckbox, gridSizeInput; // NEW variables for grid controls


// --- UTILITY FUNCTIONS ---
function showElement(el) { if(el) el.classList.remove('hidden'); }
function hideElement(el) { if(el) el.classList.add('hidden'); }
function displayAuthError(el, message) { if(el) { el.textContent = message; showElement(el); } }
function clearAuthError(el) { if(el) { el.textContent = ''; hideElement(el); } }
function showLoadingIndicator(message) { if (aiLoadingIndicator) { aiLoadingIndicator.textContent = message || "ƒêang x·ª≠ l√Ω AI..."; showElement(aiLoadingIndicator); } }
function hideLoadingIndicator() { if (aiLoadingIndicator) { hideElement(aiLoadingIndicator); } }
function hideContextMenu() { if(contextMenu) hideElement(contextMenu); contextMenuJustOpened = false; }

function openAiResponseModal(title, userQuestion, aiAnswer) {
    if (aiResponseModalOverlay && aiResponseModalTitle && aiResponseModalBody) {
        aiResponseModalTitle.textContent = title || "Ph·∫£n h·ªìi t·ª´ AI";
        let contentHTML = '';
        if (userQuestion) {
            const sanitizedUserQuestion = userQuestion.replace(/</g, "&lt;").replace(/>/g, "&gt;");
            contentHTML += `<p><strong>ƒê·∫ßu v√†o cho AI (c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c r√∫t g·ªçn):</strong></p><pre style="max-height: 150px; overflow-y: auto; background-color: #efefef; padding: 5px; border-radius: 3px; white-space: pre-wrap; word-wrap: break-word;">${sanitizedUserQuestion}</pre>`;
        }
        const formattedAiAnswer = aiAnswer.replace(/\n/g, '<br>');
        contentHTML += `<p><strong>AI tr·∫£ l·ªùi:</strong></p><div style="background-color: #f9f9f9; padding: 10px; border-radius: 4px; white-space: pre-wrap; word-wrap: break-word; font-size: 0.9em;">${formattedAiAnswer}</div>`;
        aiResponseModalBody.innerHTML = contentHTML;
        showElement(aiResponseModalOverlay);
        if (currentKonvaStage && currentKonvaStage.listening()) { currentKonvaStage.listening(false); }
    }
}
function closeAiResponseModal() {
    if (aiResponseModalOverlay) { hideElement(aiResponseModalOverlay); }
    if (currentKonvaStage && !currentKonvaStage.listening()) { currentKonvaStage.listening(true); }
}
function openNodeContentModal(nodeTitle, fullContent) {
    if (nodeContentModalOverlay && nodeContentModalTitle && nodeContentModalBody) {
        nodeContentModalTitle.textContent = `N·ªôi dung: ${nodeTitle.substring(0, 30)}${nodeTitle.length > 30 ? '...' : ''}`;

        // Improved content formatting: split by paragraph (multiple newlines), then replace single newlines with <br>
        const paragraphs = fullContent.split(/\n\s*\n/); // Split by one or more newlines, possibly with spaces
        let formattedBodyHtml = paragraphs.map(p => {
            const trimmedP = p.trim();
            return trimmedP ? `<p>${trimmedP.replace(/\n/g, '<br>')}</p>` : ''; // Convert remaining newlines in paragraph to <br>
        }).join('');

        nodeContentModalBody.innerHTML = `<div class="readable-content">${formattedBodyHtml}</div>`;

        // Add Copy button (needs to be dynamically added to footer or header)
        // Let's add it to the footer dynamically.
        let modalFooter = document.querySelector('#node-content-modal-overlay .modal-footer');
        // Ensure footer exists or create it
        if (!modalFooter) {
            modalFooter = document.createElement('div');
            modalFooter.className = 'modal-footer';
            document.querySelector('#node-content-modal-overlay .modal-content').appendChild(modalFooter);
        }
        // Remove existing copy button if any, to prevent duplicates
        let existingCopyButton = modalFooter.querySelector('#copy-node-content-button');
        if (existingCopyButton) {
            existingCopyButton.remove();
        }

        const copyButton = document.createElement('button');
        copyButton.id = 'copy-node-content-button';
        copyButton.textContent = 'üìã Sao ch√©p n·ªôi dung';
        copyButton.className = 'secondary'; // Use secondary style
        copyButton.onclick = () => {
            navigator.clipboard.writeText(fullContent)
                .then(() => {
                    copyButton.textContent = '‚úÖ ƒê√£ sao ch√©p!';
                    setTimeout(() => copyButton.textContent = 'üìã Sao ch√©p n·ªôi dung', 2000);
                })
                .catch(err => {
                    console.error('Failed to copy text: ', err);
                    alert('L·ªói khi sao ch√©p n·ªôi dung.');
                });
        };
        modalFooter.prepend(copyButton); // Add to the left of existing close button in footer


        showElement(nodeContentModalOverlay);
        if (currentKonvaStage && currentKonvaStage.listening()) { currentKonvaStage.listening(false); }
    }
}
function closeNodeContentModal() {
    if (nodeContentModalOverlay) { hideElement(nodeContentModalOverlay); }
    if (currentKonvaStage && !currentKonvaStage.listening()) { currentKonvaStage.listening(true); }
}

/**
 * Parses a markdown-like indented text structure into an array of node objects
 * suitable for creating a mind map. Assigns temporary IDs and parent IDs.
 *
 * @param {string} text The markdown-like text from AI.
 * @param {string} mapId The Firestore ID of the mind map this structure belongs to.
 * @returns {Array<Object>} An array of node objects with { text, level, parentId (temp), tempId }.
 */
function parseMindmapStructure(text, mapId) {
    const lines = text.split('\n').filter(line => line.trim() !== '');
    const nodes = [];
    const stack = []; // To keep track of parent nodes at each level: [{tempId, level}]

    console.log("Starting parseMindmapStructure with text:", text); // DEBUG: Raw text input

    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        console.log(`Processing line ${i}: "${line}"`); // DEBUG: Current line

        let currentLevel = 0;
        let content = line;

        // Determine level by counting leading spaces and then checking for '- '
        // This regex captures leading spaces (group 1) and then the rest of the line (group 2)
        const match = line.match(/^(\s*)(.*)/);
        if (!match) {
            console.warn(`Skipping line due to parse error (no match): "${line}"`);
            continue;
        }

        const leadingSpaces = match[1]; // e.g., "  ", "    "
        content = match[2]; // Content after leading spaces, before stripping bullet

        // Calculate level based on leading spaces. Assume 2 spaces per level.
        currentLevel = Math.floor(leadingSpaces.length / 2);

        // Now, strip the leading '- ' if present in the content part
        if (content.startsWith('- ')) {
            content = content.substring(2).trim(); // Remove '- ' and then trim
        } else if (content.startsWith('-')) { // Handle single hyphen without space (e.g., "- Root")
            content = content.substring(1).trim(); // Remove '-' and then trim
        } else {
            content = content.trim(); // Just trim if no bullet
        }

        if (!content) { // Skip empty content lines after stripping markers
            console.log(`Skipping empty content line after stripping: "${line}"`);
            continue;
        }

        const tempId = `node-${Date.now()}-${i}`; // Unique temporary ID for this node

        let parentTempId = null;
        // Adjust stack based on current level
        // Pop elements from stack if their level is >= current node's level
        while (stack.length > 0 && stack[stack.length - 1].level >= currentLevel) {
            stack.pop();
        }
        // The new parent is the last element on the stack (if any)
        if (stack.length > 0) {
            parentTempId = stack[stack.length - 1].tempId;
        }

        const newNode = {
            mapId: mapId,
            text: content, // Use the stripped content
            level: currentLevel,
            tempId: tempId,
            parentId: parentTempId,
        };

        nodes.push(newNode);
        stack.push(newNode); // Add current node to stack as a potential parent for its children

        console.log(`  Parsed: Level=${newNode.level}, Content="${newNode.text}", ParentId=${newNode.parentId}`); // DEBUG: Parsed node details
    }
    console.log("Parsed nodes (Revised):", nodes); // DEBUG: Check final parsed nodes array
    return nodes;
}


// --- AUTHENTICATION LOGIC ---
async function handleRegister() {
    if (!auth) {
         displayAuthError(registerErrorMsg, "L·ªói: D·ªãch v·ª• x√°c th·ª±c ch∆∞a s·∫µn s√†ng.");
         return;
    }
    const email = registerEmailInput.value;
    const password = registerPasswordInput.value;
    clearAuthError(registerErrorMsg);
    try {
        await createUserWithEmailAndPassword(auth, email, password);
        // No need to manually call authStateChangedHandler, onAuthStateChanged will handle it
    } catch (error) {
        console.error("Register error:", error);
        displayAuthError(registerErrorMsg, "L·ªói ƒëƒÉng k√Ω: " + error.code + " - " + error.message);
    }
}
async function handleLogin() {
    if (!auth) {
         displayAuthError(loginErrorMsg, "L·ªói: D·ªãch v·ª• x√°c th·ª±c ch∆∞a s·∫µn s√†ng.");
         return;
    }
    const email = loginEmailInput.value;
    const password = loginPasswordInput.value;
    clearAuthError(loginErrorMsg);
    try {
        await signInWithEmailAndPassword(auth, email, password);
        // No need to manually call authStateChangedHandler, onAuthStateChanged will handle it
    } catch (error) {
        console.error("Login error:", error);
        displayAuthError(loginErrorMsg, "L·ªói ƒëƒÉng nh·∫≠p: " + error.code + " - " + error.message);
    }
}
async function handleLogout() {
    if (!auth) return;
    try {
        await signOut(auth);
        // onAuthStateChanged will handle UI changes
        currentMindMapId = null; // Reset current map ID
        if (mindmapNodesUnsubscribe) mindmapNodesUnsubscribe(); // Unsubscribe from node listeners
        if (mindmapDataUnsubscribe) mindmapDataUnsubscribe(); // Unsubscribe from map data listeners
        window.removeEventListener('keydown', handleGlobalKeyDown); // Remove global key listener
    } catch (error) {
        console.error("Logout error:", error);
    }
}
function authStateChangedHandler(user) {
    if (user) {
        currentUser = user;
        if(userEmailDisplay) userEmailDisplay.textContent = `Ch√†o, ${user.email}`;
        hideElement(authSection);
        showElement(mainAppSection);
        showMindmapManagementView(); // Show the list of mind maps
        loadUserMindMaps(); // Load maps for the current user
    } else {
        currentUser = null;
        if(userEmailDisplay) userEmailDisplay.textContent = '';
        showElement(authSection);
        hideElement(mainAppSection);
        hideElement(canvasView); // Hide canvas if logged out
        if(nodeStylePanel) hideElement(nodeStylePanel);
        hideContextMenu();
        if(normalMindmapListUl) normalMindmapListUl.innerHTML = ''; // Clear normal mind map list
        if(aiMindmapListUl) aiMindmapListUl.innerHTML = ''; // Clear AI mind map list
        window.removeEventListener('keydown', handleGlobalKeyDown);
    }
}

// --- UI VIEW MANAGEMENT ---
function showMindmapManagementView() {
    if(mainAppTitle) mainAppTitle.textContent = "B·∫£ng ƒëi·ªÅu khi·ªÉn";
    if(mindmapManagementView) showElement(mindmapManagementView);
    if(canvasView) hideElement(canvasView);
    if(nodeStylePanel) hideElement(nodeStylePanel);
    hideContextMenu();
    currentMindMapId = null;
    selectedKonvaNode = null;
    rightClickedKonvaNode = null;
    if (mindmapNodesUnsubscribe) {
        mindmapNodesUnsubscribe();
        mindmapNodesUnsubscribe = null;
    }
    if (mindmapDataUnsubscribe) {
        mindmapDataUnsubscribe();
        mindmapDataUnsubscribe = null;
    }
    if (currentKonvaStage) {
        currentKonvaStage.destroyChildren(); // Clear canvas
        currentKonvaLayer = null; // Reset layer
    }
    window.removeEventListener('keydown', handleGlobalKeyDown); // Remove key listener for canvas
}
async function showCanvasView(mapId, mapTitle) {
    if(mainAppTitle) mainAppTitle.textContent = "S∆° ƒë·ªì t∆∞ duy";
    if(mindmapManagementView) hideElement(mindmapManagementView);
    if(canvasView) showElement(canvasView);
    if(currentMindmapTitleDisplay) currentMindmapTitleDisplay.textContent = mapTitle;
    currentMindMapId = mapId;
    initKonvaStage(); // Initialize Konva for the selected map
    // Listen for canvas state changes (zoom/pan)
    if (db && currentMindMapId) {
        const mapDocRef = doc(db, "mindmaps", currentMindMapId);
        if (mindmapDataUnsubscribe) mindmapDataUnsubscribe(); // Unsubscribe previous listener
        mindmapDataUnsubscribe = onSnapshot(mapDocRef, (docSnap) => {
            if (docSnap.exists()) {
                const mapData = docSnap.data();
                if (mapData.canvasState && currentKonvaStage) {
                    currentKonvaStage.scaleX(mapData.canvasState.scaleX || 1);
                    currentKonvaStage.scaleY(mapData.canvasState.scaleY || 1);
                    currentKonvaStage.x(mapData.canvasState.x || 0);
                    currentKonvaStage.y(mapData.canvasState.y || 0);

                    // NEW: Load grid and snap states
                    isGridVisible = mapData.canvasState.isGridVisible || false;
                    isSnapToGridEnabled = mapData.canvasState.isSnapToGridEnabled || false;
                    gridSize = mapData.canvasState.gridSize || 50;

                    // Update UI elements
                    if (toggleGridCheckbox) toggleGridCheckbox.checked = isGridVisible;
                    if (toggleSnapToGridCheckbox) toggleSnapToGridCheckbox.checked = isSnapToGridEnabled;
                    if (gridSizeInput) gridSizeInput.value = gridSize;

                    updateGrid(); // Redraw grid based on loaded state

                    currentKonvaStage.batchDraw();
                }
            }
        }, (error) => {
            console.error("Error listening to mindmap data:", error);
        });
    }
    if(nodeStylePanel) hideElement(nodeStylePanel); // Hide style panel initially
    hideContextMenu();
    window.addEventListener('keydown', handleGlobalKeyDown); // Add key listener for canvas
}

// --- NODE STYLE PANEL LOGIC ---
function lineDashArrayToString(dashArray) {
    if (!dashArray || dashArray.length === 0) return 'solid';
    if (JSON.stringify(dashArray) === JSON.stringify([15, 8])) return 'dashed';
    if (JSON.stringify(dashArray) === JSON.stringify([3, 8])) return 'dotted';
    return 'solid'; // Default
}
function stringToLineDashArray(dashString) {
    if (dashString === 'dashed') return [15, 8];
    if (dashString === 'dotted') return [3, 8];
    return []; // Solid
}
function updateNodeStylePanel(nodeData) {
    if (!nodeData || !nodeData.style) {
        if(nodeStylePanel) hideElement(nodeStylePanel);
        return;
    }
    const style = nodeData.style;
    if(nodeShapeSelect) nodeShapeSelect.value = style.shape || DEFAULT_NODE_STYLE.shape;
    if(nodeFontFamilySelect) nodeFontFamilySelect.value = style.fontFamily || DEFAULT_NODE_STYLE.fontFamily;
    if(nodeFontSizeInput) nodeFontSizeInput.value = style.fontSize || DEFAULT_NODE_STYLE.fontSize;
    if(nodeIconSelect) nodeIconSelect.value = style.icon || '';
    if(nodeBgColorInput) nodeBgColorInput.value = style.backgroundColor || DEFAULT_NODE_STYLE.backgroundColor;
    if(nodeTextColorInput) nodeTextColorInput.value = style.textColor || DEFAULT_NODE_STYLE.textColor;
    if(nodeBorderColorInput) nodeBorderColorInput.value = style.borderColor || DEFAULT_NODE_STYLE.borderColor;
    if(nodeLineColorInput) nodeLineColorInput.value = style.lineColor || DEFAULT_NODE_STYLE.lineColor;
    if(nodeLineDashSelect) nodeLineDashSelect.value = lineDashArrayToString(style.lineDash);
    if(nodeLineWidthInput) nodeLineWidthInput.value = style.lineWidth || DEFAULT_NODE_STYLE.lineWidth;
    if(nodeStylePanel) showElement(nodeStylePanel);
}
async function handleNodeStyleChange(property, value) {
    if (!selectedKonvaNode || !db) return;
    const nodeId = selectedKonvaNode.id();
    let processedValue = value;
    if (property === 'lineWidth' || property === 'fontSize') {
        processedValue = parseInt(value, 10);
    } else if (property === 'lineDash') {
        processedValue = stringToLineDashArray(value);
    }
    try {
        const nodeRef = doc(db, "nodes", nodeId);
        const nodeSnap = await getDoc(nodeRef);
        if (nodeSnap.exists()) {
            const existingData = nodeSnap.data();
            const existingStyle = existingData.style || {};
            let updatedStyle = { ...existingStyle, [property]: processedValue };

            // Adjust cornerRadius based on shape
            if (property === 'shape') {
                if (processedValue === 'ellipse') {
                    // Ellipse doesn't use cornerRadius in Konva Rect, it's a separate shape
                } else if (processedValue === 'rectangle' && !updatedStyle.cornerRadius) {
                    updatedStyle.cornerRadius = 0; // Default for sharp rectangle
                } else if (processedValue === 'roundedRectangle' && (!updatedStyle.cornerRadius || updatedStyle.cornerRadius === 0) ) {
                    updatedStyle.cornerRadius = 5; // Default for rounded rectangle
                }
            }
            await updateDoc(nodeRef, { style: updatedStyle });
            // Real-time update will be handled by onSnapshot in renderNodesAndLines
        } else {
            console.warn("Node not found for style update:", nodeId);
        }
    } catch (e) {
        console.error(`Error updating node style (${property}):`, e);
    }
}
function calculatePotentialFullHeight(text, styleConfig) {
    const style = { ...DEFAULT_NODE_STYLE, ...styleConfig };
    const textPadding = style.padding;
    let iconTextWidth = 0;
    if (style.icon && style.icon !== '') {
        const tempIconForCalc = new Konva.Text({ text: style.icon, fontSize: style.iconSize, fontFamily: style.fontFamily });
        iconTextWidth = tempIconForCalc.width() + style.iconSpacing;
    }
    const mainTextWidth = style.width - 2 * textPadding - iconTextWidth;

    // Create a temporary Konva.Text to measure actual height
    const tempText = new Konva.Text({
        text: text,
        fontSize: style.fontSize,
        fontFamily: style.fontFamily,
        width: mainTextWidth > 0 ? mainTextWidth : 0, // Prevent negative width
        align: 'center',
        lineHeight: 1.2 // Consistent line height
    });
    const actualTextContentHeight = tempText.height();
    // Ensure minHeight is respected and icon height is considered
    return Math.max(style.minHeight, actualTextContentHeight + 2 * textPadding, style.icon ? (style.iconSize + 2 * textPadding) : 0);
}

// --- FIRESTORE SERVICE LOGIC (Mind Maps) ---
async function handleCreateMindmap() {
    if (!db) { alert("L·ªói: D·ªãch v·ª• c∆° s·ªü d·ªØ li·ªáu ch∆∞a s·∫µn s√†ng."); return; }
    const title = newMindmapTitleInput.value.trim();
    if (!title) { alert("Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ cho s∆° ƒë·ªì."); return; }
    if (!currentUser) { alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o s∆° ƒë·ªì."); return; }

    try {
        const mindMapData = {
            userId: currentUser.uid,
            title: title,
            createdAt: serverTimestamp(),
            lastModified: serverTimestamp(),
            type: 'normal', // NEW: Add type for normal mind map
            canvasState: {
                scaleX: 1, scaleY: 1, x: 0, y: 0,
                isGridVisible: false, // NEW: Default grid off
                isSnapToGridEnabled: false, // NEW: Default snap off
                gridSize: 50 // NEW: Default grid size
            }
        };
        const mindMapDocRef = await addDoc(collection(db, "mindmaps"), mindMapData);

        // Create a default root node for the new mind map
        const rootNodeData = {
            mapId: mindMapDocRef.id,
            parentId: null, // Root node has no parent
            text: "√ù t∆∞·ªüng trung t√¢m",
            position: { x: (konvaContainer?.clientWidth || 800) / 2 - 75, y: 50 }, // Centered horizontally, near top
            style: { ...DEFAULT_NODE_STYLE, backgroundColor: "#1877f2", textColor: "#ffffff", borderColor: "#0e5aab", shape: "ellipse", minHeight: 60 },
            createdAt: serverTimestamp()
        };
        await addDoc(collection(db, "nodes"), rootNodeData);
        newMindmapTitleInput.value = ''; // Clear input field
    } catch (e) {
        console.error("Error creating new mind map: ", e);
        alert("L·ªói khi t·∫°o s∆° ƒë·ªì: " + e.message);
    }
}
async function loadUserMindMaps() {
    if (!currentUser || !db) return;

    // Clear previous lists and show loading indicators
    if(normalMindmapListLoading) showElement(normalMindmapListLoading);
    if(aiMindmapListLoading) showElement(aiMindmapListLoading); // Show AI loading initially
    if(normalMindmapListUl) normalMindmapListUl.innerHTML = '';
    if(aiMindmapListUl) aiMindmapListUl.innerHTML = '';

    // Unsubscribe from any previous listeners to prevent duplicates or outdated listeners
    if (typeof window.normalMindmapsListenerUnsubscribe === 'function') {
        window.normalMindmapsListenerUnsubscribe();
    }
    if (typeof window.aiMindmapsListenerUnsubscribe === 'function') {
        window.aiMindmapsListenerUnsubscribe();
    }

    try {
        // Query for normal mind maps
        const qNormal = query(collection(db, "mindmaps"),
                              where("userId", "==", currentUser.uid),
                              where("type", "==", "normal"));
        window.normalMindmapsListenerUnsubscribe = onSnapshot(qNormal, (querySnapshot) => {
            if(normalMindmapListUl) normalMindmapListUl.innerHTML = ''; // Clear list on each update
            if (querySnapshot.empty) {
                if(normalMindmapListUl) normalMindmapListUl.innerHTML = '<li>B·∫°n ch∆∞a c√≥ s∆° ƒë·ªì th∆∞·ªùng n√†o.</li>';
            }
            querySnapshot.forEach((docSnap) => {
                const map = { id: docSnap.id, ...docSnap.data() };
                const li = document.createElement('li');
                li.textContent = map.title;
                li.dataset.mapId = map.id;
                li.dataset.mapTitle = map.title;

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'X√≥a';
                deleteButton.classList.add('danger', 'secondary');
                deleteButton.onclick = async (e) => {
                    e.stopPropagation();
                    if (window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s∆° ƒë·ªì "${map.title}" v√† t·∫•t c·∫£ c√°c n√∫t c·ªßa n√≥?`)) {
                        await deleteMindMap(map.id);
                    }
                };
                li.appendChild(deleteButton);
                li.addEventListener('click', () => {
                    showCanvasView(map.id, map.title);
                });
                if(normalMindmapListUl) normalMindmapListUl.appendChild(li);
            });
            if(normalMindmapListLoading) hideElement(normalMindmapListLoading);
        }, (error) => {
            console.error("Error fetching normal mind maps: ", error);
            if(normalMindmapListUl) normalMindmapListUl.innerHTML = '<li>L·ªói khi t·∫£i danh s√°ch s∆° ƒë·ªì th∆∞·ªùng.</li>';
            if(normalMindmapListLoading) hideElement(normalMindmapListLoading);
        });

        // Query for AI-generated mind maps
        const qAI = query(collection(db, "mindmaps"),
                          where("userId", "==", currentUser.uid),
                          where("type", "==", "ai"));
        window.aiMindmapsListenerUnsubscribe = onSnapshot(qAI, (querySnapshot) => {
            if(aiMindmapListUl) aiMindmapListUl.innerHTML = ''; // Clear list on each update
            if (querySnapshot.empty) {
                if(aiMindmapListUl) aiMindmapListUl.innerHTML = '<li>B·∫°n ch∆∞a c√≥ s∆° ƒë·ªì AI n√†o.</li>';
            }
            querySnapshot.forEach((docSnap) => {
                const map = { id: docSnap.id, ...docSnap.data() };
                const li = document.createElement('li');
                li.textContent = map.title;
                li.dataset.mapId = map.id;
                li.dataset.mapTitle = map.title;

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'X√≥a';
                deleteButton.classList.add('danger', 'secondary');
                deleteButton.onclick = async (e) => {
                    e.stopPropagation();
                    if (window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s∆° ƒë·ªì "${map.title}" v√† t·∫•t c·∫£ c√°c n√∫t c·ªßa n√≥?`)) {
                        await deleteMindMap(map.id);
                    }
                };
                li.appendChild(deleteButton);
                li.addEventListener('click', () => {
                    showCanvasView(map.id, map.title);
                });
                if(aiMindmapListUl) aiMindmapListUl.appendChild(li);
            });
            if(aiMindmapListLoading) hideElement(aiMindmapListLoading);
        }, (error) => {
            console.error("Error fetching AI mind maps: ", error);
            if(aiMindmapListUl) aiMindmapListUl.innerHTML = '<li>L·ªói khi t·∫£i danh s√°ch s∆° ƒë·ªì AI.</li>';
            if(aiMindmapListLoading) hideElement(aiMindmapListLoading);
        });

    } catch (e) {
        console.error("Error setting up mind map listeners: ", e);
        if(normalMindmapListUl) normalMindmapListUl.innerHTML = '<li>L·ªói khi t·∫£i danh s√°ch s∆° ƒë·ªì.</li>';
        if(aiMindmapListUl) aiMindmapListUl.innerHTML = '<li>L·ªói khi t·∫£i danh s√°ch s∆° ƒë·ªì.</li>';
        if(normalMindmapListLoading) hideElement(normalMindmapListLoading);
        if(aiMindmapListLoading) hideElement(aiMindmapListLoading);
    }
}
async function deleteMindMap(mapId) {
    if (!mapId || !db) return;
    try {
        // 1. Delete all nodes associated with this mind map
        const nodesQuery = query(collection(db, "nodes"), where("mapId", "==", mapId));
        const nodesSnapshot = await getDocs(nodesQuery);
        const batch = writeBatch(db);
        nodesSnapshot.forEach(nodeDoc => {
            batch.delete(doc(db, "nodes", nodeDoc.id));
        });
        await batch.commit();

        // 2. Delete the mind map document itself
        await deleteDoc(doc(db, "mindmaps", mapId));
        // The onSnapshot listener for mind maps will automatically update the list
    } catch (error) {
        console.error("Error deleting mind map: ", error);
        alert("L·ªói khi x√≥a s∆° ƒë·ªì: " + e.message);
    }
}

// --- FIRESTORE SERVICE LOGIC (Nodes) & KONVA INTEGRATION ---
// START: Pinch to Zoom Helper functions
function getDistance(p1, p2) {
    return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
}
function getCenter(p1, p2) {
    return {
        x: (p1.x + p2.x) / 2,
        y: (p1.y + p2.y) / 2,
    };
}
let lastCenter = null;
let lastDist = 0;
// END: Pinch to Zoom Helper functions

function initKonvaStage() {
    // Clear previous stage and layer if they exist
    if (currentKonvaStage) {
        currentKonvaStage.off('dragstart dragmove dragend click tap wheel contextmenu touchstart touchend touchmove mousedown mousemousemove mouseup'); // Remove all event listeners
        currentKonvaStage.destroy();
        currentKonvaStage = null;
    }
    if (currentKonvaLayer) {
        currentKonvaLayer.destroy();
        currentKonvaLayer = null;
    }

    const container = document.getElementById('konva-container');
    if (!container) {
        console.error("Konva container not found!");
        return;
    }

    currentKonvaStage = new Konva.Stage({
        container: 'konva-container',
        width: container.clientWidth,
        height: container.clientHeight,
        draggable: true, // Stage itself is draggable for panning
    });
    currentKonvaLayer = new Konva.Layer();
    currentKonvaStage.add(currentKonvaLayer);
    selectedKonvaNode = null; // Reset selected node

    // Mousedown/Touchstart for pinch-zoom and potential drag start
    currentKonvaStage.on('mousedown touchstart', function(e_stage) {
        let hitShape = e_stage.target;
        let determinedTargetNodeGroup = null;

        // Pinch-to-zoom: Check for two touches
        const touches = e_stage.evt.touches;
        if (touches && touches.length === 2) {
            e_stage.evt.preventDefault(); // Prevent default browser zoom/scroll
            currentKonvaStage.draggable(false); // Disable stage dragging during pinch
            const touch1 = touches[0];
            const touch2 = touches[1];
            lastCenter = getCenter({ x: touch1.clientX, y: touch1.clientY }, { x: touch2.clientX, y: touch2.clientY });
            lastDist = getDistance({ x: touch1.clientX, y: touch1.clientY }, { x: touch2.clientX, y: touch2.clientY });
            potentiallyDraggedNode = null; // Ensure no node dragging during pinch
            return; // Stop further processing for mousedown/touchstart if it's a pinch start
        }


        if (hitShape === currentKonvaStage) { // Clicked on empty stage area
            potentiallyDraggedNode = null;
            currentKonvaStage.draggable(true); // Ensure stage is draggable
            clearTimeout(longPressTimeoutId); // Clear any pending long press
            touchStartTargetNodeForContextMenu = null;
        } else { // Clicked on a shape within the stage
            // Traverse up to find the 'mindmapNodeGroup'
            let currentShape = hitShape;
            while (currentShape && currentShape !== currentKonvaStage) {
                if (currentShape.hasName && currentShape.hasName('mindmapNodeGroup')) {
                    determinedTargetNodeGroup = currentShape;
                    break;
                }
                if (typeof currentShape.getParent !== 'function') { // Safety check
                    determinedTargetNodeGroup = null; break;
                }
                currentShape = currentShape.getParent();
            }

            if (determinedTargetNodeGroup) { // A mindmap node was hit
                potentiallyDraggedNode = determinedTargetNodeGroup;
                dragStartPointerPosition = currentKonvaStage.getPointerPosition();
                if (currentKonvaStage.isDragging()) currentKonvaStage.stopDrag(); // Stop stage drag if active
                currentKonvaStage.draggable(false); // Disable stage dragging when a node might be dragged

                // Long press for context menu on touch devices
                if (e_stage.type === 'touchstart') {
                    touchStartTargetNodeForContextMenu = determinedTargetNodeGroup;
                    const touch = e_stage.evt.touches && e_stage.evt.touches[0];
                    if (touch) {
                        touchStartCoordsForLongPress = { x: touch.pageX, y: touch.pageY };
                        touchStartPointerPositionForContextMenu = { x: touch.pageX, y: touch.pageY }; // Use pageX/Y for menu position
                    } else { // Fallback if touch object is not available (should not happen for touchstart)
                        const pointerPos = currentKonvaStage.getPointerPosition() || {x:0, y:0};
                        touchStartCoordsForLongPress = pointerPos;
                        touchStartPointerPositionForContextMenu = pointerPos;
                    }

                    clearTimeout(longPressTimeoutId); // Clear previous timeout
                    longPressTimeoutId = setTimeout(() => {
                        if (touchStartTargetNodeForContextMenu) { // If still the same target after delay
                            rightClickedKonvaNode = touchStartTargetNodeForContextMenu;
                            // Select the node if not already selected
                            if (!selectedKonvaNode || selectedKonvaNode.id() !== rightClickedKonvaNode.id()) {
                                if (selectedKonvaNode) { selectedKonvaNode.findOne('.nodeShape')?.strokeWidth(1); removeCreationHandle(selectedKonvaNode); }
                                selectedKonvaNode = rightClickedKonvaNode;
                                selectedKonvaNode.findOne('.nodeShape')?.strokeWidth(3);
                                const shape = selectedKonvaNode.findOne('.nodeShape');
                                if (shape) addCreationHandle(selectedKonvaNode, shape.height());
                                const nodeData = allNodesDataForCurrentMap.find(n => n.id === selectedKonvaNode.id());
                                if (nodeData) updateNodeStylePanel(nodeData);
                                currentKonvaLayer.batchDraw();
                            }
                            // Show context menu at touch position
                            if (contextMenu && touchStartPointerPositionForContextMenu) {
                                contextMenu.style.top = touchStartPointerPositionForContextMenu.y + 'px';
                                contextMenu.style.left = touchStartPointerPositionForContextMenu.x + 'px';
                                showElement(contextMenu);
                                contextMenuJustOpened = true;
                            }
                            touchStartTargetNodeForContextMenu = null; // Reset for next long press
                            longPressTimeoutId = null;
                        }
                    }, LONG_PRESS_DELAY);
                }
            } else { // Clicked on something else (e.g., a line, or an unhandled shape)
                potentiallyDraggedNode = null;
                currentKonvaStage.draggable(true); // Ensure stage is draggable
                clearTimeout(longPressTimeoutId);
                touchStartTargetNodeForContextMenu = null;
            }
        }
    });

    // Mousemove/Touchmove for pinch-zoom and node dragging
    currentKonvaStage.on('mousemove touchmove', function(e_stage) {
        const touches = e_stage.evt.touches;

        // Pinch-to-zoom logic
        if (touches && touches.length === 2) { // Only process if two touches are active
            e_stage.evt.preventDefault(); // Prevent default browser zoom/scroll

            const touch1 = touches[0];
            const touch2 = touches[1];

            const currentCenter = getCenter({ x: touch1.clientX, y: touch1.clientY }, { x: touch2.clientX, y: touch2.clientY });
            const currentDist = getDistance({ x: touch1.clientX, y: touch1.clientY }, { x: touch2.clientX, y: touch2.clientY });

            if (lastDist > 0) { // Only zoom if a previous distance was recorded (i.e., pinch has started)
                const pointTo = { // Calculate mouse pointer position relative to the stage
                    x: (currentCenter.x - currentKonvaStage.x()) / currentKonvaStage.scaleX(),
                    y: (currentCenter.y - currentKonvaStage.y()) / currentKonvaStage.scaleY(),
                };

                const newScale = currentKonvaStage.scaleX() * (currentDist / lastDist); // Calculate new scale

                currentKonvaStage.scale({ x: newScale, y: newScale });
                
                // Calculate new position of the stage
                const dx = currentCenter.x - lastCenter.x;
                const dy = currentCenter.y - lastCenter.y;

                const newPos = {
                    x: currentCenter.x - pointTo.x * newScale + dx,
                    y: currentCenter.y - pointTo.y * newScale + dy,
                };
                currentKonvaStage.position(newPos);
                currentKonvaStage.batchDraw();
            }

            lastDist = currentDist;
            lastCenter = currentCenter;
            potentiallyDraggedNode = null; // Ensure no node dragging during pinch
            currentKonvaStage.draggable(false); // Disable stage dragging during pinch
            return; // Stop further processing for mousemove/touchmove if it's a pinch
        }


        // Cancel long press if finger moves too much
        if (touchStartTargetNodeForContextMenu && e_stage.type === 'touchmove') {
            const touch = e_stage.evt.touches && e_stage.evt.touches[0];
            if (touch) {
                const deltaX = Math.abs(touch.pageX - touchStartCoordsForLongPress.x);
                const deltaY = Math.abs(touch.pageY - touchStartCoordsForLongPress.y);
                if (deltaX > LONG_PRESS_MOVE_THRESHOLD || deltaY > LONG_PRESS_MOVE_THRESHOLD) {
                    clearTimeout(longPressTimeoutId); // Cancel long press
                    touchStartTargetNodeForContextMenu = null;
                }
            }
        }

        // Node dragging logic
        if (!potentiallyDraggedNode || !dragStartPointerPosition) {
            return; // Not a drag operation or drag hasn't started
        }
        // For mousemove, ensure primary button is pressed (for desktop)
        if (e_stage.type === 'mousemove' && e_stage.evt.buttons !== 1) {
            return;
        }
        const currentPointerPosition = currentKonvaStage.getPointerPosition();
        if (!currentPointerPosition) return; // Safety check
        const dx = currentPointerPosition.x - dragStartPointerPosition.x;
        const dy = currentPointerPosition.y - dragStartPointerPosition.y;

        // Only start dragging if moved beyond threshold
        if (Math.sqrt(dx * dx + dy * dy) > DRAG_THRESHOLD) {
            if (potentiallyDraggedNode.draggable() === false) { // If not already dragging
                potentiallyDraggedNode.draggable(true); // Make it draggable
                potentiallyDraggedNode.startDrag(e_stage.evt); // Start Konva drag
            }
            clearTimeout(longPressTimeoutId); // Cancel long press if dragging starts
            touchStartTargetNodeForContextMenu = null;
        }
    });

    // Mouseup/Touchend to reset states
    currentKonvaStage.on('mouseup touchend', function(e_stage) {
        clearTimeout(longPressTimeoutId); // Clear any pending long press
        touchStartTargetNodeForContextMenu = null;
        potentiallyDraggedNode = null; // Reset potentially dragged node
        dragStartPointerPosition = null; // Reset drag start position

        // Reset pinch zoom state
        if (lastDist > 0) { // Was pinching
            saveCanvasState(); // Save state after pinch zoom ends
        }
        lastDist = 0;
        lastCenter = null;

        currentKonvaStage.draggable(true); // Re-enable stage dragging
    });


    currentKonvaStage.on('dragend', saveCanvasState); // For stage drag
    currentKonvaStage.on('wheel', (e) => { // For mouse wheel zoom
        e.evt.preventDefault();
        const oldScale = currentKonvaStage.scaleX();
        const pointer = currentKonvaStage.getPointerPosition();
        if (!pointer) return; // Safety check

        const mousePointTo = {
            x: (pointer.x - currentKonvaStage.x()) / oldScale,
            y: (pointer.y - currentKonvaStage.y()) / oldScale,
        };
        const direction = e.evt.deltaY > 0 ? -1 : 1; // Corrected direction for standard wheel behavior (up = zoom in, down = zoom out)
        let newScale;
        if (direction > 0) { // Zoom in
             newScale = oldScale * scaleBy;
        } else { // Zoom out
             newScale = oldScale / scaleBy;
        }

        currentKonvaStage.scale({ x: newScale, y: newScale });
        const newPos = {
            x: pointer.x - mousePointTo.x * newScale,
            y: pointer.y - mousePointTo.y * newScale,
        };
        currentKonvaStage.position(newPos);
        currentKonvaStage.batchDraw();
        saveCanvasState(); // Save state after zoom
    });

    currentKonvaStage.on('click tap', function(e) {
        if (e.target === currentKonvaStage) { // Clicked on empty stage area
            if (selectedKonvaNode) { // Deselect any currently selected node
                selectedKonvaNode.findOne('.nodeShape')?.strokeWidth(1); // Reset stroke
                removeCreationHandle(selectedKonvaNode); // Remove creation handle
                selectedKonvaNode = null;
                if(nodeStylePanel) hideElement(nodeStylePanel); // Hide style panel
                currentKonvaLayer.batchDraw();
            }
            hideContextMenu(); // Hide context menu if open
        }
        // Node click/tap is handled by the group's event listener
    });

    currentKonvaStage.on('contextmenu', function(e_context) {
        e_context.evt.preventDefault(); // Prevent default browser context menu
        if (e_context.evt.pointerType === 'touch') { // Ignore contextmenu from touch (handled by long press)
            return;
        }

        let hitShape = e_context.target;
        let determinedTargetNodeGroup = null;

        // Traverse up to find the 'mindmapNodeGroup'
        let currentShape = hitShape;
        while (currentShape && currentShape !== currentKonvaStage) {
            if (currentShape.hasName && currentShape.hasName('mindmapNodeGroup')) {
                determinedTargetNodeGroup = currentShape;
                break;
            }
            if (typeof currentShape.getParent !== 'function') { // Safety check
                determinedTargetNodeGroup = null; break;
            }
            currentShape = currentShape.getParent();
        }

        if (determinedTargetNodeGroup) { // A mindmap node was right-clicked
            rightClickedKonvaNode = determinedTargetNodeGroup;
            // Select the node if not already selected
            if (!selectedKonvaNode || selectedKonvaNode.id() !== rightClickedKonvaNode.id()) {
                if (selectedKonvaNode) { selectedKonvaNode.findOne('.nodeShape')?.strokeWidth(1); removeCreationHandle(selectedKonvaNode); }
                selectedKonvaNode = rightClickedKonvaNode;
                selectedKonvaNode.findOne('.nodeShape')?.strokeWidth(3);
                const shape = selectedKonvaNode.findOne('.nodeShape');
                if (shape) addCreationHandle(selectedKonvaNode, shape.height());
                const nodeData = allNodesDataForCurrentMap.find(n => n.id === selectedKonvaNode.id());
                if (nodeData) updateNodeStylePanel(nodeData);
                currentKonvaLayer.batchDraw();
            }
            // Show context menu at mouse position
            if(contextMenu) {
                contextMenu.style.top = e_context.evt.pageY + 'px';
                contextMenu.style.left = e_context.evt.pageX + 'px';
                showElement(contextMenu);
                contextMenuJustOpened = true;
            }
        } else { // Right-clicked on empty area or non-node element
            rightClickedKonvaNode = null;
            hideContextMenu();
        }
    });
    loadAndListenNodesForCurrentMap(); // Load nodes for the current map
}
async function saveCanvasState() {
    if (!currentKonvaStage || !currentMindMapId || !db || !currentUser) return;
    try {
        const mapRef = doc(db, "mindmaps", currentMindMapId);
        await updateDoc(mapRef, {
            "canvasState.scaleX": currentKonvaStage.scaleX(),
            "canvasState.scaleY": currentKonvaStage.scaleY(),
            "canvasState.x": currentKonvaStage.x(),
            "canvasState.y": currentKonvaStage.y(),
            "canvasState.isGridVisible": isGridVisible, // NEW
            "canvasState.isSnapToGridEnabled": isSnapToGridEnabled, // NEW
            "canvasState.gridSize": gridSize, // NEW
            lastModified: serverTimestamp() // Update last modified timestamp
        });
    } catch (error) {
        console.error("Error saving canvas state:", error);
    }
}
function loadAndListenNodesForCurrentMap() {
    if (!currentMindMapId || !currentKonvaLayer || !db) {
        console.warn("Cannot load nodes: Missing mapId, layer, or db connection.");
        return;
    }
    if(konvaContainerLoading) showElement(konvaContainerLoading);
    if(currentKonvaLayer) currentKonvaLayer.destroyChildren(); // Clear previous nodes
    if(currentKonvaLayer) currentKonvaLayer.draw(); // Redraw empty layer
     allNodesDataForCurrentMap = []; // Reset local cache

    const q = query(collection(db, "nodes"), where("mapId", "==", currentMindMapId));
    if (mindmapNodesUnsubscribe) mindmapNodesUnsubscribe(); // Unsubscribe from previous listener

    mindmapNodesUnsubscribe = onSnapshot(q, (querySnapshot) => {
        const nodesFromDb = [];
        querySnapshot.forEach((docSnap) => {
            nodesFromDb.push({ id: docSnap.id, ...docSnap.data() });
        });
        allNodesDataForCurrentMap = nodesFromDb; // Update local cache
        console.log("Nodes from DB (onSnapshot):", allNodesDataForCurrentMap); // DEBUG: Check data from Firestore
        renderNodesAndLines(allNodesDataForCurrentMap); // Re-render all nodes and lines
        if(konvaContainerLoading) hideElement(konvaContainerLoading);
    }, (error) => {
        console.error(`Error listening to nodes for map ${currentMindMapId}:`, error);
        alert("L·ªói khi t·∫£i c√°c n√∫t c·ªßa s∆° ƒë·ªì: " + error.message);
        if(konvaContainerLoading) hideElement(konvaContainerLoading);
    });
}

// NEW: Function to draw grid
function updateGrid() {
    if (!currentKonvaLayer || !currentKonvaStage) return;

    // Remove existing grid lines by name
    currentKonvaLayer.find('.gridLine').forEach(line => line.destroy());
    gridLines = []; // Clear the array

    if (isGridVisible) {
        const stageWidth = currentKonvaStage.width();
        const stageHeight = currentKonvaStage.height();

        // Draw vertical lines
        for (let i = 0; i * gridSize < stageWidth; i++) {
            const x = i * gridSize;
            const line = new Konva.Line({
                points: [x, 0, x, stageHeight],
                stroke: '#e0e0e0', // Light grey
                strokeWidth: 0.5,
                listening: false, // Don't capture events
                name: 'gridLine' // Name for easy removal
            });
            currentKonvaLayer.add(line);
            gridLines.push(line);
        }

        // Draw horizontal lines
        for (let i = 0; i * gridSize < stageHeight; i++) {
            const y = i * gridSize;
            const line = new Konva.Line({
                points: [0, y, stageWidth, y],
                stroke: '#e0e0e0', // Light grey
                strokeWidth: 0.5,
                listening: false, // Don't capture events
                name: 'gridLine' // Name for easy removal
            });
            currentKonvaLayer.add(line);
            gridLines.push(line);
        }
    }
    currentKonvaLayer.batchDraw();
}

// NEW: Function to snap position to grid
function snapToGrid(pos) {
    if (!isSnapToGridEnabled || !gridSize) return pos;
    return {
        x: Math.round(pos.x / gridSize) * gridSize,
        y: Math.round(pos.y / gridSize) * gridSize,
    };
}


function renderNodesAndLines(nodesData) {
    if (!currentKonvaLayer) return;
    currentKonvaLayer.destroyChildren(); // Clear existing shapes
    const konvaNodeObjects = {}; // To store Konva group objects for linking

    // Re-draw grid first, so it's always at the bottom
    updateGrid();

    nodesData.forEach(nodeData => {
        // Basic validation for node data
        if (!nodeData.position || typeof nodeData.position.x !== 'number' || typeof nodeData.position.y !== 'number') {
            console.warn("Node data missing valid position, skipping:", nodeData);
            return;
        }

        const style = { ...DEFAULT_NODE_STYLE, ...(nodeData.style || {}) };
        const fullText = nodeData.text || "";

        // Calculate available width for text considering padding and icon
        let iconWidthForCalc = 0;
        if (style.icon && style.icon !== '') {
            const tempIcon = new Konva.Text({ text: style.icon, fontSize: style.iconSize, fontFamily: style.fontFamily });
            iconWidthForCalc = tempIcon.width() + style.iconSpacing;
        }
        const textRenderWidth = style.width - (2 * style.padding) - iconWidthForCalc;

        // Determine text display height and if truncation is needed
        const tempTextObj = new Konva.Text({
            text: fullText,
            fontSize: style.fontSize,
            fontFamily: style.fontFamily,
            width: textRenderWidth > 0 ? textRenderWidth : 0, // Prevent negative width
            lineHeight: 1.2, // Consistent line height
            align: 'center'
        });
        const fullTextActualHeight = tempTextObj.height(); // Actual height of the full text

        const estimatedLineHeight = style.fontSize * 1.2;
        const maxVisibleTextHeightInNode = estimatedLineHeight * MAX_DISPLAY_LINES_IN_NODE;
        const isTextTruncated = fullTextActualHeight > maxVisibleTextHeightInNode;
        // NEW: Truncate text content directly for display
        let displayText = fullText;
        if (isTextTruncated) {
            // A simple way to truncate text to fit max lines, may need more complex logic for perfect fit
            const words = fullText.split(' ');
            let currentLines = 0;
            let truncatedWords = [];
            let tempLineHeightCheck = new Konva.Text({
                fontSize: style.fontSize, fontFamily: style.fontFamily, width: textRenderWidth
            });

            for (let k = 0; k < words.length; k++) {
                const testText = truncatedWords.concat(words[k]).join(' ');
                tempLineHeightCheck.text(testText);
                if (tempLineHeightCheck.height() / estimatedLineHeight > MAX_DISPLAY_LINES_IN_NODE) {
                    break; // Exceeded max lines
                }
                truncatedWords.push(words[k]);
            }
            displayText = truncatedWords.join(' ');
            // Ensure we don't add "..." if the text is already short enough
            if (displayText.length < fullText.length) {
                displayText += '...';
            }
        }


        const textDisplayHeight = isTextTruncated ? maxVisibleTextHeightInNode : fullTextActualHeight;

        // Calculate shape height based on text, minHeight, and "Read more" indicator
        let shapeRenderHeight = Math.max(style.minHeight, textDisplayHeight + (2 * style.padding));

        if (isTextTruncated) {
            const readMoreIndicatorHeight = estimatedLineHeight * 0.8; // Approximate height for "Xem th√™m"
            // Ensure shape is tall enough for text + padding + "Read more"
            shapeRenderHeight = Math.max(shapeRenderHeight, textDisplayHeight + (2 * style.padding) + readMoreIndicatorHeight + style.padding * 0.5);
        }

        // Create Konva Group for the node
        const group = new Konva.Group({
            x: nodeData.position.x,
            y: nodeData.position.y,
            draggable: false, // Will be enabled on drag start after threshold
            id: nodeData.id,
            name: 'mindmapNodeGroup',
            fullTextData: fullText // Store full text in an attribute for easy access
        });

        // Create the main shape (rectangle, ellipse, etc.)
        let shape;
        if (style.shape === 'ellipse') {
            shape = new Konva.Ellipse({
                x: style.width / 2, y: shapeRenderHeight / 2, // Center of ellipse
                radiusX: style.width / 2, radiusY: shapeRenderHeight / 2,
                fill: style.backgroundColor, stroke: style.borderColor, strokeWidth: 1, name: 'nodeShape'
            });
        } else if (style.shape === 'roundedRectangle') {
            shape = new Konva.Rect({
                width: style.width, height: shapeRenderHeight,
                fill: style.backgroundColor, stroke: style.borderColor, strokeWidth: 1,
                cornerRadius: style.cornerRadius || 10, name: 'nodeShape' // Default cornerRadius if not specified
            });
        } else { // Default to rectangle
            shape = new Konva.Rect({
                width: style.width, height: shapeRenderHeight,
                fill: style.backgroundColor, stroke: style.borderColor, strokeWidth: 1,
                cornerRadius: 0, name: 'nodeShape' // No corner radius for plain rectangle
            });
        }
        group.add(shape);
        shape.moveToBottom(); // Ensure shape is behind text and icon

        // Add icon if specified
        if (style.icon && style.icon !== '') {
            const iconObject = new Konva.Text({
                text: style.icon, fontSize: style.iconSize, fontFamily: style.fontFamily, fill: style.textColor,
                x: style.padding, // Position icon with padding
                y: (shapeRenderHeight - style.iconSize) / 2, // Vertically center icon
                listening: false, // Icon itself shouldn't capture events
                name: 'nodeIcon'
            });
            group.add(iconObject);
        }

        // Create text object for display (potentially truncated)
        const textToRender = new Konva.Text({
            text: displayText, // Use truncated text for display
            fontSize: style.fontSize, fontFamily: style.fontFamily, fill: style.textColor,
            width: textRenderWidth > 0 ? textRenderWidth : 0, // Prevent negative width
            height: textDisplayHeight, // Set to calculated display height
            x: style.padding + iconWidthForCalc, // Position text after icon and padding
            y: style.padding, // Position text with padding from top
            align: 'center', // Center align text
            verticalAlign: 'top', // Align text to the top of its bounding box
            lineHeight: 1.2, // Consistent line height
            listening: true, // Text should be clickable/tappable
            name: 'nodeTextContent'
        });

        // No need for textToRender.clip() anymore as text is pre-truncated

        // Add "Read more" indicator if text was truncated
        if (isTextTruncated) {
             const readMoreText = new Konva.Text({
                x: style.padding + iconWidthForCalc, // Align with main text
                y: style.padding + textDisplayHeight + style.padding * 0.2, // Position below truncated text
                text: '... Xem th√™m',
                fontSize: style.fontSize * 0.8, // Smaller font for indicator
                fill: '#007bff', // Link-like color
                fontStyle: 'italic',
                name: 'readMoreIndicator',
                width: textRenderWidth, // Same width as text block for alignment
                align: 'right' // Align to the right
            });
            group.add(readMoreText);
            // Event listener for "Read more"
            readMoreText.on('click tap', (ev) => {
                const isPrimaryInteraction = (ev.evt.button === 0 && ev.type === 'click') || ev.type === 'tap';
                if (isPrimaryInteraction && !contextMenuJustOpened) { // Avoid conflict with context menu
                    openNodeContentModal(nodeData.text.substring(0,30)+"...", fullText);
                } else if (contextMenuJustOpened) {
                    contextMenuJustOpened = false; // Reset flag if context menu was just opened
                }
                ev.evt.cancelBubble = true; // Prevent event bubbling to the group
            });
        }
        group.add(textToRender);

        // REMOVED: The problematic listener that opened modal on text click
        // if (isTextTruncated) {
        //     textToRender.on('click tap', (ev) => {
        //         const isPrimaryInteraction = (ev.evt.button === 0 && ev.type === 'click') || ev.type === 'tap';
        //         if (isPrimaryInteraction && !contextMenuJustOpened) {
        //             openNodeContentModal(nodeData.text.substring(0,30)+"...", fullText);
        //         } else if (contextMenuJustOpened) {
        //             contextMenuJustOpened = false;
        //         }
        //         ev.evt.cancelBubble = true;
        //     });
        // }

        // Event listener for node drag end
        group.on('dragend', async function() {
            if(!db) return;
            let finalX = this.x();
            let finalY = this.y();

            if (isSnapToGridEnabled) {
                const snappedPos = snapToGrid({ x: finalX, y: finalY });
                finalX = snappedPos.x;
                finalY = snappedPos.y;
                this.position({ x: finalX, y: finalY }); // Update Konva node position to snapped position
                currentKonvaLayer.batchDraw(); // Redraw immediately after snap
            }

            try {
                await updateDoc(doc(db, "nodes", this.id()), { position: { x: finalX, y: finalY } });
            } catch (e) {
                console.error("Error updating node position:", e);
            }
            this.draggable(false); // Disable draggable after drag ends (re-enabled on mousedown if needed)
        });

        // Event listener for node click/tap (selection)
        group.on('click tap', function(e) {
            e.evt.cancelBubble = true; // Prevent event bubbling to the stage
            if (isEditingText) return; // Prevent selection if modal is open
            if (e.target.name() === 'readMoreIndicator') return; // Handled by its own listener
            if (this.isDragging && this.isDragging()) { return; } // Don't select if it was a drag operation

            const isPrimaryInteraction = (e.evt.button === 0 && e.type === 'click') || e.type === 'tap';

            if (isPrimaryInteraction) {
                if (contextMenuJustOpened) { // If context menu was just opened by this click/tap (e.g., long press)
                    contextMenuJustOpened = false; // Reset the flag
                } else { // If it's a normal click/tap not related to context menu opening
                    // This is for selection, not opening modal.
                    // The modal opening is now exclusively handled by the 'readMoreIndicator'
                }
            }

            // Node selection logic
            if (selectedKonvaNode && selectedKonvaNode !== this) { // Deselect previous node
                selectedKonvaNode.findOne('.nodeShape')?.strokeWidth(1);
                removeCreationHandle(selectedKonvaNode);
            }
            selectedKonvaNode = this; // Select current node
            const shapeNode = this.findOne('.nodeShape');
            if (shapeNode) {
              shapeNode.strokeWidth(3); // Highlight selected node
              addCreationHandle(this, shapeNode.height()); // Add creation handle
            }

            const clickedNodeData = allNodesDataForCurrentMap.find(n => n.id === this.id());
            if (clickedNodeData) updateNodeStylePanel(clickedNodeData); // Update style panel
            currentKonvaLayer.batchDraw(); // Redraw layer

            // Hide context menu if a primary click occurs outside of it
            if (isPrimaryInteraction && contextMenu && !contextMenu.classList.contains('hidden')) {
                if (!contextMenu.contains(e.target)) { // If click is outside context menu
                     hideContextMenu();
                }
            }
        });
        // UPDATED: Call new editTextOnKonvaNode for dblclick/dbltap
        group.on('dblclick dbltap', function() {
            editTextOnKonvaNode(this); // Pass the group directly
            hideContextMenu(); // Hide context menu if open
        });

        konvaNodeObjects[nodeData.id] = group; // Store Konva group for line drawing
        currentKonvaLayer.add(group);

        // If this node was previously selected, re-apply selected state
        if (selectedKonvaNode && selectedKonvaNode.id() === nodeData.id) {
            shape.strokeWidth(3);
            addCreationHandle(group, shape.height());
        }
    });

    // Draw lines between parent and child nodes
    nodesData.forEach(nodeData => {
        if (nodeData.parentId && konvaNodeObjects[nodeData.parentId] && konvaNodeObjects[nodeData.id]) {
            const parentKonvaNode = konvaNodeObjects[nodeData.parentId];
            const childKonvaNode = konvaNodeObjects[nodeData.id];
            const parentNodeFromData = allNodesDataForCurrentMap.find(n=>n.id === nodeData.parentId); // Get parent's full data for style

            const parentRenderedShape = parentKonvaNode.findOne('.nodeShape');
            const childRenderedShape = childKonvaNode.findOne('.nodeShape');

            // Ensure shapes exist before trying to get dimensions
            if (!parentRenderedShape || !childRenderedShape) {
                console.warn("Skipping line: parent or child shape not found for line between", nodeData.parentId, "and", nodeData.id);
                return;
            }

            const parentActualHeight = parentRenderedShape.height();
            const childActualHeight = childRenderedShape.height();
            const parentActualWidth = parentRenderedShape.width();
            const childActualWidth = childRenderedShape.width();

            const parentStyle = { ...DEFAULT_NODE_STYLE, ...(parentNodeFromData?.style || {}) }; // Use parent's line style

            const line = new Konva.Line({
                points: [
                    parentKonvaNode.x() + parentActualWidth / 2, parentKonvaNode.y() + parentActualHeight / 2, // Center of parent
                    childKonvaNode.x() + childActualWidth / 2, childKonvaNode.y() + childActualHeight / 2    // Center of child
                ],
                stroke: parentStyle.lineColor,
                strokeWidth: parentStyle.lineWidth,
                dash: parentStyle.lineDash,
                lineCap: 'round',
                lineJoin: 'round',
                name: 'connectionLine'
            });
            currentKonvaLayer.add(line);
            line.moveToBottom(); // Draw lines behind nodes
        }
    });
    currentKonvaLayer.batchDraw(); // Redraw the layer with all nodes and lines
}
function addCreationHandle(parentNodeGroup, parentCurrentShapeHeight) {
    if (!parentNodeGroup || parentNodeGroup.findOne('.creationHandle')) return; // Don't add if exists

    const parentShapeInitial = parentNodeGroup.findOne('.nodeShape');
    if (!parentShapeInitial) {
        console.error("addCreationHandle: parentShapeInitial is undefined. Cannot add handle to node:", parentNodeGroup.id());
        return;
    }
    const shapeWidth = parentShapeInitial.width();
    // Position handle at the bottom-center of the shape
    let handleX = shapeWidth / 2;
    let handleY = parentCurrentShapeHeight; // Use the passed current height
    // Adjust for ellipse if needed (though typically a rect/roundedRect is better for this handle)
    if (parentShapeInitial.getClassName() === 'Ellipse') {
        handleX = parentShapeInitial.x(); // Ellipse x is center
        handleY = parentShapeInitial.y() + parentShapeInitial.radiusY(); // Bottom edge of ellipse
    }

    const handle = new Konva.Circle({
        x: handleX, y: handleY, radius: HANDLE_RADIUS, fill: HANDLE_FILL,
        stroke: HANDLE_STROKE, strokeWidth: 1, draggable: true, name: 'creationHandle',
        dragDistance: 3, // Minimum distance to start drag
        dragBoundFunc: function(pos) { // Keep handle within parent's local coordinate system
            const parentAbsPos = parentNodeGroup.getAbsolutePosition();
            return {
                x: pos.x - parentAbsPos.x, // Convert absolute pos to relative
                y: pos.y - parentAbsPos.y,
            };
        }
    });
    parentNodeGroup.add(handle);
    parentNodeGroup.creationHandle = handle; // Store reference

    handle.on('dragstart', function(e) {
        e.evt.cancelBubble = true;
        if (!currentKonvaLayer || !parentNodeGroup) {
            console.error("dragstart: currentKonvaLayer or parentNodeGroup is missing");
            return;
        }
        const currentParentShape = parentNodeGroup.findOne('.nodeShape');
        if (!currentParentShape) {
            console.error("dragstart: currentParentShape is undefined. parentNodeGroup ID:", parentNodeGroup.id());
            return;
        }
        const parentNodeData = allNodesDataForCurrentMap.find(n => n.id === parentNodeGroup.id());
        const parentStyle = { ...DEFAULT_NODE_STYLE, ...(parentNodeData?.style || {}) };

        const lineColor = parentStyle.lineColor || DEFAULT_NODE_STYLE.lineColor;
        const lineWidth = parentStyle.lineWidth || DEFAULT_NODE_STYLE.lineWidth;
        let startX = currentParentShape.width() / 2;
        let startY = currentParentShape.height() / 2;
        if (currentParentShape.getClassName() === 'Ellipse') { // Adjust for ellipse center
            startX = currentParentShape.x();
            startY = currentParentShape.y();
        }
        tempCreationLine = new Konva.Line({
            points: [ startX, startY, this.x(), this.y() ], // Line from parent center to handle
            stroke: lineColor, strokeWidth: lineWidth, dash: parentStyle.lineDash || []
        });
        parentNodeGroup.add(tempCreationLine); // Add line to the same group as the handle
        currentKonvaLayer.batchDraw();
    });
    handle.on('dragmove', function(e) {
        e.evt.cancelBubble = true;
        if (tempCreationLine) {
            const points = tempCreationLine.points();
            points[2] = this.x(); // Update end point of the line to handle's current position
            points[3] = this.y();
            tempCreationLine.points(points);
            currentKonvaLayer.batchDraw();
        }
    });
    handle.on('dragend', async function(e) {
        e.evt.cancelBubble = true;
        if (tempCreationLine) { tempCreationLine.destroy(); tempCreationLine = null; }

        if (!parentNodeGroup) {
             console.error("dragend: parentNodeGroup is missing");
             // Attempt to reset handle position even if parent is gone (though unlikely)
             this.position({ x: (this.getStage()?.width() || 0) / 2, y: (this.getStage()?.height() || 0) / 2 });
             currentKonvaLayer.batchDraw();
             return;
        }
        const currentParentShapeForReset = parentNodeGroup.findOne('.nodeShape');
        if (!currentParentShapeForReset) {
            console.error("dragend: currentParentShapeForReset is undefined. parentNodeGroup ID:", parentNodeGroup.id());
            // Fallback reset position if shape is gone
            const groupWidth = parentNodeGroup.width() || DEFAULT_NODE_STYLE.width;
            const groupHeight = parentNodeGroup.height() || DEFAULT_NODE_STYLE.minHeight; // Use group height if shape height unknown
            this.position({ x: groupWidth / 2, y: groupHeight });
            currentKonvaLayer.batchDraw();
            return;
        }

        // Calculate new node's absolute position based on handle's final position
        let handleFinalRelativeX = this.x();
        let handleFinalRelativeY = this.y();
        const parentAbsPos = parentNodeGroup.getAbsolutePosition();
        let newNodeAbsX = parentAbsPos.x + handleFinalRelativeX;
        let newNodeAbsY = parentAbsPos.y + handleFinalRelativeY;

        // NEW: Apply snap to grid for new node creation
        if (isSnapToGridEnabled) {
            const snappedPos = snapToGrid({ x: newNodeAbsX, y: newNodeAbsY });
            newNodeAbsX = snappedPos.x;
            newNodeAbsY = snappedPos.y;
        }

        // Reset handle to its original position at the bottom of the parent
        let resetHandleX = currentParentShapeForReset.width() / 2;
        let resetHandleY = currentParentShapeForReset.height();
        if (currentParentShapeForReset.getClassName() === 'Ellipse') {
            resetHandleX = currentParentShapeForReset.x();
            resetHandleY = currentParentShapeForReset.y() + currentParentShapeForReset.radiusY();
        }
        this.position({ x: resetHandleX, y: resetHandleY });

        // Create the new child node in Firestore
        if (currentMindMapId && db && parentNodeGroup) {
            const defaultChildWidth = 120;
            const defaultChildMinHeight = 40;
            const defaultChildPadding = 10;
            const newNodeData = {
                mapId: currentMindMapId,
                parentId: parentNodeGroup.id(),
                text: "N√∫t m·ªõi (k√©o)",
                position: { // Position the new node centered at the handle's drop location
                    x: newNodeAbsX - defaultChildWidth / 2,
                    y: newNodeAbsY - defaultChildMinHeight / 2
                },
                style: { ...DEFAULT_NODE_STYLE, backgroundColor: "#f9f9f9", textColor: "#333333", borderColor: "#cccccc", width: defaultChildWidth, minHeight: defaultChildMinHeight, padding: defaultChildPadding, cornerRadius: 3, shape: "rectangle", icon: '' },
                createdAt: serverTimestamp()
            };
            try { await addDoc(collection(db, "nodes"), newNodeData); }
            catch (err) { console.error("Error creating child node by dragging:", err); alert("L·ªói khi t·∫°o n√∫t con: " + err.message); }
        }
        currentKonvaLayer.batchDraw();
    });
    currentKonvaLayer.batchDraw();
}
function removeCreationHandle(parentNodeGroup) {
    if (parentNodeGroup && parentNodeGroup.creationHandle) {
        parentNodeGroup.creationHandle.destroy();
        parentNodeGroup.creationHandle = null; // Clear reference
        currentKonvaLayer.batchDraw();
    }
}

// --- REVISED: Node Text Editing Logic (Using Modal) ---
function editTextOnKonvaNode(konvaGroup) {
    if (!konvaGroup || isEditingText || !editNodeTextModalOverlay || !editNodeTextarea) {
        // console.warn("editTextOnKonvaNode: called with invalid params or already editing.");
        return;
    }

    const fullTextData = konvaGroup.getAttr('fullTextData') || "";
    const nodeShortText = (fullTextData.substring(0, 25) + (fullTextData.length > 25 ? "..." : "")) || "N√∫t kh√¥ng t√™n";

    editingNodeIdForModal = konvaGroup.id(); // Store the ID of the node being edited

    if(editNodeTextModalTitle) editNodeTextModalTitle.textContent = `S·ª≠a n·ªôi dung: ${nodeShortText}`;
    if(editNodeTextarea) {
        editNodeTextarea.value = fullTextData;
        // Dynamically adjust textarea height based on content
        const lineCount = (fullTextData.match(/\n/g) || []).length + 1; // Count newlines + 1
        const calculatedHeight = lineCount * 20 + 20; // Approx 20px per line + 20px padding/buffer
        const newTextareaHeight = Math.min(Math.max(calculatedHeight, 150), 400); // Clamp height between 150px and 400px
        editNodeTextarea.style.height = `${newTextareaHeight}px`;
        editNodeTextarea.focus();
        // editNodeTextarea.select(); // Optional: select all text when modal opens
    }

    showElement(editNodeTextModalOverlay);

    if (currentKonvaStage && currentKonvaStage.listening()) {
        currentKonvaStage.listening(false); // Disable stage interaction while modal is open
    }
    isEditingText = true; // Set editing flag
}

function closeEditNodeModal() {
    if (editNodeTextModalOverlay) {
        hideElement(editNodeTextModalOverlay);
    }
    if (currentKonvaStage && !currentKonvaStage.listening()) {
        currentKonvaStage.listening(true); // Re-enable stage interaction
    }
    editingNodeIdForModal = null; // Clear stored node ID
    isEditingText = false; // Reset editing flag
}

async function handleSaveNodeTextFromModal() {
    if (!editingNodeIdForModal || !editNodeTextarea || !db) {
        alert("L·ªói: Kh√¥ng th·ªÉ l∆∞u n·ªôi dung n√∫t. D·ªØ li·ªáu c·∫ßn thi·∫øt b·ªã thi·∫øu.");
        closeEditNodeModal();
        return;
    }
    const newFullText = editNodeTextarea.value;
    try {
        await updateDoc(doc(db, "nodes", editingNodeIdForModal), { text: newFullText });
        // Firestore onSnapshot in renderNodesAndLines will automatically trigger re-render of the node on canvas
    } catch (e) {
        console.error("Error updating node text from modal:", e);
        alert("L·ªói khi c·∫≠p nh·∫≠t n·ªôi dung n√∫t: " + e.message);
    } finally {
        closeEditNodeModal(); // Close modal whether save succeeds or fails
    }
}


// --- H√ÄM THU TH·∫¨P D·ªÆ LI·ªÜU NH√ÅNH ---
function collectBranchDataRecursive(nodeId, allNodes, level, collectedTexts) {
    const node = allNodes.find(n => n.id === nodeId);
    if (!node) {
        return; // Node not found, stop recursion for this path
    }
    const indent = '    '.repeat(level); // Use spaces for indentation
    collectedTexts.push(indent + (node.text || "").trim()); // Add current node's text

    const children = allNodes.filter(n => n.parentId === nodeId); // Find direct children
    for (const child of children) {
        collectBranchDataRecursive(child.id, allNodes, level + 1, collectedTexts); // Recurse for each child
    }
}

/**
 * Collects the text content of a node and its ancestors up to the root,
 * forming a contextual path.
 * @param {string} nodeId The ID of the starting node.
 * @param {Array<Object>} allNodes The array of all node data in the current mind map.
 * @returns {string} A string representing the contextual path (e.g., "Root Idea > Parent Node > Current Node").
 */
function getNodeContextPath(nodeId, allNodes) {
    let path = [];
    let currentNode = allNodes.find(n => n.id === nodeId);

    // Keep track of visited nodes to prevent infinite loops in case of circular references (though Firestore data shouldn't have them)
    const visitedNodeIds = new Set(); 

    while (currentNode && !visitedNodeIds.has(currentNode.id)) {
        visitedNodeIds.add(currentNode.id);
        path.unshift(currentNode.text); // Add to the beginning to get "Ancestor > Parent > Current"
        currentNode = allNodes.find(n => n.id === currentNode.parentId);
    }
    return path.join(' > '); // Join with a separator
}


// --- AI LOGIC FUNCTIONS (Function definitions) ---
async function suggestChildNodesWithAI(targetNodeKonva) {
    if (!generativeModel || !targetNodeKonva || !currentMindMapId || !currentUser || !db) {
        alert("Ch·ª©c nƒÉng AI ch∆∞a s·∫µn s√†ng ho·∫∑c thi·∫øu th√¥ng tin c·∫ßn thi·∫øt.");
        hideContextMenu(); return;
    }
    const parentNodeId = targetNodeKonva.id();
    const parentNodeData = allNodesDataForCurrentMap.find(n => n.id === parentNodeId);
    if (!parentNodeData) { alert("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu n√∫t cha."); hideContextMenu(); return; }

    const parentText = parentNodeData.text;
    const contextPath = getNodeContextPath(parentNodeId, allNodesDataForCurrentMap); // Get context for parent node

    const prompt = `Cho n√∫t cha "${parentText}" trong ng·ªØ c·∫£nh "${contextPath}", h√£y g·ª£i √Ω 3 √Ω t∆∞·ªüng ng·∫Øn g·ªçn (kho·∫£ng 2-5 t·ª´ m·ªói √Ω t∆∞·ªüng) cho c√°c n√∫t con li√™n quan tr·ª±c ti·∫øp ƒë·∫øn "${parentText}" v√† ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh nh√°nh. M·ªói √Ω t∆∞·ªüng tr√™n m·ªôt d√≤ng ri√™ng bi·ªát. Kh√¥ng s·ª≠ d·ª•ng ƒë√°nh s·ªë, g·∫°ch ƒë·∫ßu d√≤ng hay b·∫•t k·ª≥ k√Ω t·ª± ƒë·∫∑c bi·ªát n√†o ·ªü ƒë·∫ßu d√≤ng.`;

    showLoadingIndicator("AI ƒëang t·∫°o g·ª£i √Ω...");
    hideContextMenu();
    try {
        const result = await generativeModel.generateContent(prompt);
        const response = result.response;
        const suggestionsText = response.text();
        const suggestions = suggestionsText.split('\n').map(s => s.trim()).filter(s => s.length > 0 && s.length < 50); // Filter and trim suggestions

        if (suggestions.length > 0) {
            const batch = writeBatch(db);
            let startX = targetNodeKonva.x();
            let startY = targetNodeKonva.y();
            const parentShape = targetNodeKonva.findOne('.nodeShape');
            const parentWidth = parentShape?.width() || DEFAULT_NODE_STYLE.width;
            const parentHeight = parentShape?.height() || DEFAULT_NODE_STYLE.minHeight;

            // Position new nodes below and slightly offset from parent
            startX += parentWidth / 4; // Offset a bit to the right
            startY += parentHeight + 30; // Below the parent
            const yOffsetIncrement = (DEFAULT_NODE_STYLE.minHeight || 50) + 20; // Spacing between new nodes

            suggestions.slice(0, 5).forEach((suggestion, index) => { // Limit to 5 suggestions
                const newNodeId = doc(collection(db, "nodes")).id; // Generate new ID locally
                const newNodeData = {
                    mapId: currentMindMapId,
                    parentId: parentNodeId,
                    text: suggestion,
                    position: { x: startX, y: startY + (index * yOffsetIncrement) },
                    style: { ...DEFAULT_NODE_STYLE, backgroundColor: "#E3F2FD", textColor: "#0D47A1", borderColor: "#90CAF9", shape: "roundedRectangle", cornerRadius: 8, width: 130, minHeight: 40, fontSize: 13, icon: '' },
                    createdAt: serverTimestamp()
                };
                const nodeRef = doc(db, "nodes", newNodeId);
                batch.set(nodeRef, newNodeData);
            });
            await batch.commit();
        } else {
            alert("AI kh√¥ng th·ªÉ ƒë∆∞a ra g·ª£i √Ω n√†o ph√π intimidating v√†o l√∫c n√†y.");
        }
    } catch (error) {
        console.error("Error calling Gemini API (suggestChildNodesWithAI):", error);
        let userMessage = "L·ªói khi AI g·ª£i √Ω n√∫t con: " + error.message;
        if (error.message?.includes("API key not valid")) { userMessage += "\nVui l√≤ng ki·ªÉm tra l·∫°i thi·∫øt l·∫≠p API Key trong Firebase Console cho Gemini API."; }
        else if (error.message?.includes("429") || error.message?.toLowerCase().includes("quota")) { userMessage = "B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu t·ªõi AI ho·∫∑c ƒë√£ h·∫øt h·∫°n ng·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t."; }
        else if (error.message?.toLowerCase().includes("model not found")){ userMessage = "Model AI kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n model ƒë√£ c·∫•u h√¨nh.";}
        else if (error.message?.toLowerCase().includes("candidate.safetyRatings")){ userMessage = "Ph·∫£n h·ªìi t·ª´ AI b·ªã ch·∫∑n do v·∫•n ƒë·ªÅ an to√†n n·ªôi dung.";}
        alert(userMessage);
    } finally {
        hideLoadingIndicator();
    }
}
async function expandNodeWithAI(targetNodeKonva) {
    if (!generativeModel || !targetNodeKonva || !currentMindMapId || !currentUser || !db) {
        alert("Ch·ª©c nƒÉng AI ch∆∞a s·∫µn s√†ng ho·∫∑c thi·∫øu th√¥ng tin n√∫t.");
        hideContextMenu(); return;
    }
    const targetNodeId = targetNodeKonva.id();
    const targetNodeData = allNodesDataForCurrentMap.find(n => n.id === targetNodeId);
    if (!targetNodeData) { alert("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho n√∫t ƒë√£ ch·ªçn."); hideContextMenu(); return; }

    const currentText = targetNodeData.text;
    const contextPath = getNodeContextPath(targetNodeId, allNodesDataForCurrentMap); // Get context from ancestors

    const prompt = `B·∫°n l√† m·ªôt chuy√™n gia s∆° ƒë·ªì t∆∞ duy.
N√∫t hi·ªán t·∫°i trong s∆° ƒë·ªì t∆∞ duy c√≥ n·ªôi dung: "${currentText}"
N√∫t n√†y n·∫±m trong ng·ªØ c·∫£nh c·ªßa nh√°nh: "${contextPath}"

D·ª±a tr√™n ng·ªØ c·∫£nh n√†y, h√£y vi·∫øt m·ªôt ƒëo·∫°n vƒÉn b·∫£n chi ti·∫øt h∆°n (kho·∫£ng 3-5 c√¢u) ƒë·ªÉ gi·∫£i th√≠ch, l√†m r√µ ho·∫∑c m·ªü r·ªông √Ω t∆∞·ªüng c·ªßa n√∫t hi·ªán t·∫°i. ƒê·∫£m b·∫£o c√¢u tr·∫£ l·ªùi li√™n quan ch·∫∑t ch·∫Ω ƒë·∫øn ng·ªØ c·∫£nh c·ªßa c√°c n√∫t cha v√† kh√¥ng chung chung.`;

    showLoadingIndicator("AI ƒëang m·ªü r·ªông √Ω t∆∞·ªüng...");
    hideContextMenu();
    try {
        const result = await generativeModel.generateContent(prompt);
        const response = result.response;
        const expandedText = response.text().trim();

        if (expandedText && expandedText !== currentText) {
            const nodeRef = doc(db, "nodes", targetNodeId);
            await updateDoc(nodeRef, { text: expandedText });
            // Firestore onSnapshot will re-render the node
        } else if (expandedText === currentText) {
            alert("AI kh√¥ng t√¨m th·∫•y c√°ch m·ªü r·ªông th√™m cho √Ω t∆∞·ªüng n√†y.");
        }
        else {
            alert("AI kh√¥ng th·ªÉ m·ªü r·ªông √Ω t∆∞·ªüng v√†o l√∫c n√†y.");
        }
    } catch (error) {
        console.error("Error calling Gemini API (expandNodeWithAI):", error);
        let userMessage = "L·ªói khi AI m·ªü r·ªông √Ω t∆∞·ªüng: " + error.message;
        if (error.message?.includes("API key not valid")) { userMessage += "\nVui l√≤ng ki·ªÉm tra l·∫°i thi·∫øt l·∫≠p API Key trong Firebase Console cho Gemini API."; }
        else if (error.message?.includes("429") || error.message?.toLowerCase().includes("quota")) { userMessage = "B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu t·ªõi AI ho·∫∑c ƒë√£ h·∫øt h·∫°n ng·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t."; }
        else if (error.message?.toLowerCase().includes("billing")){ userMessage = "C√≥ v·∫•n ƒë·ªÅ v·ªõi c√†i ƒë·∫∑t thanh to√°n cho d·ª± √°n Firebase c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra trong Google Cloud Console."; }
        else if (error.message?.toLowerCase().includes("model not found")){ userMessage = "Model AI kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n model ƒë√£ c·∫•u h√¨nh.";}
        else if (error.message?.toLowerCase().includes("candidate.safetyRatings")){ userMessage = "Ph·∫£n h·ªìi t·ª´ AI b·ªã ch·∫∑n do v·∫•n ƒë·ªÅ an to√†n n·ªôi dung.";}
        alert(userMessage);
    } finally {
        hideLoadingIndicator();
    }
}
async function generateExamplesWithAI(targetNodeKonva) {
     if (!generativeModel || !targetNodeKonva || !currentMindMapId || !currentUser || !db) {
        alert("Ch·ª©c nƒÉng AI ch∆∞a s·∫µn s√†ng ho·∫∑c thi·∫øu th√¥ng tin n√∫t.");
        hideContextMenu(); return;
    }
    const targetNodeId = targetNodeKonva.id();
    const targetNodeData = allNodesDataForCurrentMap.find(n => n.id === targetNodeId);
    if (!targetNodeData) { alert("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho n√∫t ƒë√£ ch·ªçn."); hideContextMenu(); return; }

    const currentText = targetNodeData.text;
    const contextPath = getNodeContextPath(targetNodeId, allNodesDataForCurrentMap); // Get context from ancestors

    const prompt = `Cho ch·ªß ƒë·ªÅ sau: "${currentText}", trong ng·ªØ c·∫£nh nh√°nh: "${contextPath}", h√£y t·∫°o ra 2 ho·∫∑c 3 v√≠ d·ª• c·ª• th·ªÉ ƒë·ªÉ minh h·ªça cho ch·ªß ƒë·ªÅ n√†y. C√°c v√≠ d·ª• ph·∫£i ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh ƒë√£ cho. M·ªói v√≠ d·ª• tr√™n m·ªôt d√≤ng ri√™ng bi·ªát. Kh√¥ng d√πng ƒë√°nh s·ªë hay g·∫°ch ƒë·∫ßu d√≤ng. C√°c v√≠ d·ª• n√™n ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu.`;

    showLoadingIndicator("AI ƒëang t·∫°o v√≠ d·ª•...");
    hideContextMenu();
    try {
        const result = await generativeModel.generateContent(prompt);
        const response = result.response;
        const examplesText = response.text().trim();
        const examples = examplesText.split('\n').map(s => s.trim()).filter(s => s.length > 0 && s.length < 150); // Filter and trim suggestions

        if (examples.length > 0) {
            const batch = writeBatch(db);
            let startX = targetNodeKonva.x();
            let startY = targetNodeKonva.y();
            const parentShape = targetNodeKonva.findOne('.nodeShape');
            const parentWidth = parentShape?.width() || DEFAULT_NODE_STYLE.width;
            const parentHeight = parentShape?.height() || DEFAULT_NODE_STYLE.minHeight;

            startX += parentWidth / 4; // Offset a bit to the right
            startY += parentHeight + 30; // Below the parent
            const yOffsetIncrement = (DEFAULT_NODE_STYLE.minHeight || 50) + 20; // Spacing between new nodes

            examples.slice(0, 5).forEach((suggestion, index) => { // Limit to 5 suggestions
                const newNodeId = doc(collection(db, "nodes")).id;
                const exampleNodeStyle = { ...DEFAULT_NODE_STYLE, backgroundColor: "#E8F5E9", textColor: "#2E7D32", borderColor: "#A5D6A7", shape: "roundedRectangle", cornerRadius: 7, width: 160, minHeight: 40, fontSize: 13, icon: 'üí°' };
                const newNodeData = {
                    mapId: currentMindMapId,
                    parentId: targetNodeId,
                    text: `V√≠ d·ª•: ${suggestion}`,
                    position: { x: startX + (index * 10), y: startY + (index * yOffsetIncrement) }, // Stagger positions slightly
                    style: exampleNodeStyle,
                    createdAt: serverTimestamp()
                };
                const nodeRef = doc(db, "nodes", newNodeId);
                batch.set(nodeRef, newNodeData);
            });
            await batch.commit();
        } else {
            alert("AI kh√¥ng th·ªÉ t·∫°o v√≠ d·ª• n√†o ph√π h·ª£p v√†o l√∫c n√†y.");
        }
    } catch (error) {
        console.error("Error calling Gemini API (generateExamplesWithAI):", error);
        let userMessage = "L·ªói khi AI t·∫°o v√≠ d·ª•: " + error.message;
        if (error.message?.includes("API key not valid")) { userMessage += "\nVui l√≤ng ki·ªÉm tra l·∫°i thi·∫øt l·∫≠p API Key trong Firebase Console cho Gemini API."; }
        else if (error.message?.includes("429") || error.message?.toLowerCase().includes("quota")) { userMessage = "B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu t·ªõi AI ho·∫∑c ƒë√£ h·∫øt h·∫°n ng·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t."; }
        else if (error.message?.toLowerCase().includes("model not found")){ userMessage = "Model AI kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n model ƒë√£ c·∫•u h√¨nh.";}
        else if (error.message?.toLowerCase().includes("candidate.safetyRatings")){ userMessage = "Ph·∫£n h·ªìi t·ª´ AI b·ªã ch·∫∑n do v·∫•n ƒë·ªÅ an to√†n n·ªôi dung.";}
        alert(userMessage);
    } finally {
        hideLoadingIndicator();
    }
}
async function askAIAboutNode(targetNodeKonva) {
    if (!generativeModel || !targetNodeKonva || !currentMindMapId || !currentUser || !db) {
        alert("Ch·ª©c nƒÉng AI ch∆∞a s·∫µn s√†ng ho·∫∑c thi·∫øu th√¥ng tin n√∫t.");
        hideContextMenu(); return;
    }
    const targetNodeId = targetNodeKonva.id();
    const targetNodeData = allNodesDataForCurrentMap.find(n => n.id === targetNodeId);
    if (!targetNodeData) { alert("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho n√∫t ƒë√£ ch·ªçn."); hideContextMenu(); return; }

    const nodeTextContext = targetNodeData.text;
    const contextPath = getNodeContextPath(targetNodeId, allNodesDataForCurrentMap); // Get context from ancestors
    const userQuestion = window.prompt(`H·ªèi AI v·ªÅ n·ªôi dung c·ªßa n√∫t: "${nodeTextContext}"\nNg·ªØ c·∫£nh: "${contextPath}"\n\nNh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:`, "");

    if (!userQuestion || userQuestion.trim() === "") {
        hideContextMenu(); return; // User cancelled or entered nothing
    }

    const prompt = `N·ªôi dung c·ªßa m·ªôt n√∫t trong s∆° ƒë·ªì t∆∞ duy l√†: "${nodeTextContext}". N√∫t n√†y n·∫±m trong ng·ªØ c·∫£nh c·ªßa nh√°nh: "${contextPath}".\n\nNg∆∞·ªùi d√πng c√≥ c√¢u h·ªèi sau v·ªÅ n√∫t n√†y: "${userQuestion.trim()}"\n\nH√£y tr·∫£ l·ªùi c√¢u h·ªèi ƒë√≥ m·ªôt c√°ch ng·∫Øn g·ªçn v√† s√∫c t√≠ch, t·∫≠p trung v√†o ng·ªØ c·∫£nh ƒë∆∞·ª£c cung c·∫•p t·ª´ n√∫t v√† nh√°nh c·ªßa n√≥.`;
    showLoadingIndicator("AI ƒëang tr·∫£ l·ªùi c√¢u h·ªèi...");
    hideContextMenu();
    try {
        const result = await generativeModel.generateContent(prompt);
        const response = result.response;
        const aiAnswer = response.text().trim();

        if (aiAnswer) {
            openAiResponseModal(`H·ªèi AI v·ªÅ: "${nodeTextContext.substring(0,30)}..."`, userQuestion.trim(), aiAnswer);
        }
        else {
            openAiResponseModal(`H·ªèi AI v·ªÅ: "${nodeTextContext.substring(0,30)}..."`, userQuestion.trim(), "AI kh√¥ng th·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi v√†o l√∫c n√†y.");
        }
    } catch (error) {
        console.error("Error calling Gemini API (askAIAboutNode):", error);
        let userMessage = "L·ªói khi AI tr·∫£ l·ªùi c√¢u h·ªèi: " + error.message;
        if (error.message?.includes("API key not valid")) { userMessage += "\nVui l√≤ng ki·ªÉm tra l·∫°i thi·∫øt l·∫≠p API Key trong Firebase Console cho Gemini API."; }
        else if (error.message?.includes("429") || error.message?.toLowerCase().includes("quota")) { userMessage = "B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu t·ªõi AI ho·∫∑c ƒë√£ h·∫øt h·∫°n ng·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t."; }
        else if (error.message?.toLowerCase().includes("billing")){ userMessage = "C√≥ v·∫•n ƒë·ªÅ v·ªõi c√†i ƒë·∫∑t thanh to√°n cho d·ª± √°n Firebase c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra trong Google Cloud Console."; }
        else if (error.message?.toLowerCase().includes("model not found")){ userMessage = "Model AI kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n model ƒë√£ c·∫•u h√¨nh.";}
        else if (error.message?.toLowerCase().includes("candidate.safetyRatings")){ userMessage = "Ph·∫£n h·ªìi t·ª´ AI b·ªã ch·∫∑n do v·∫•n ƒë·ªÅ an to√†n n·ªôi dung.";}
        openAiResponseModal("L·ªói AI", userQuestion.trim(), userMessage);
    } finally {
        hideLoadingIndicator();
    }
}

async function summarizeBranchWithAI(targetNodeKonva) {
    if (!generativeModel || !targetNodeKonva || !currentMindMapId || !currentUser || !db) {
        alert("Ch·ª©c nƒÉng AI ch∆∞a s·∫µn s√†ng ho·∫∑c kh√¥ng c√≥ n√∫t n√†o ƒë∆∞·ª£c ch·ªçn.");
        hideContextMenu(); return;
    }
    const rootNodeId = targetNodeKonva.id();
    const rootNodeData = allNodesDataForCurrentMap.find(n => n.id === rootNodeId);
    if (!rootNodeData) {
        alert("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho n√∫t g·ªëc c·ªßa nh√°nh.");
        hideContextMenu(); return;
    }

    showLoadingIndicator("AI ƒëang chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ t√≥m t·∫Øt...");
    hideContextMenu();

    const branchTextsArray = [];
    collectBranchDataRecursive(rootNodeId, allNodesDataForCurrentMap, 0, branchTextsArray);

    if (branchTextsArray.length === 0) {
        alert("Kh√¥ng c√≥ d·ªØ li·ªáu vƒÉn b·∫£n trong nh√°nh n√†y ƒë·ªÉ t√≥m t·∫Øt.");
        hideLoadingIndicator(); return;
    }

    const branchContentForPrompt = branchTextsArray.join('\n');
    const maxContentLength = 15000; // Adjust as needed, consider token limits for the model
    let truncatedContent = branchContentForPrompt;
    let isTruncated = false;
    if (branchContentForPrompt.length > maxContentLength) {
        console.warn("N·ªôi dung nh√°nh qu√° d√†i, ƒë√£ ƒë∆∞·ª£c c·∫Øt b·ªõt ƒë·ªÉ g·ª≠i cho AI.");
        truncatedContent = branchContentForPrompt.substring(0, maxContentLength) + "\n... (n·ªôi dung ƒë√£ ƒë∆∞·ª£c c·∫Øt b·ªõt do qu√° d√†i)";
        isTruncated = true;
    }

    const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI xu·∫•t s·∫Øc, chuy√™n v·ªÅ ph√¢n t√≠ch v√† t√≥m t·∫Øt th√¥ng tin t·ª´ s∆° ƒë·ªì t∆∞ duy.
D∆∞·ªõi ƒë√¢y l√† n·ªôi dung c·ªßa m·ªôt nh√°nh trong s∆° ƒë·ªì t∆∞ duy, ƒë∆∞·ª£c tr√¨nh b√†y theo c·∫•u tr√∫c ph√¢n c·∫•p (c√°c m·ª•c con ƒë∆∞·ª£c th·ª•t ƒë·∫ßu d√≤ng t∆∞∆°ng ·ª©ng v·ªõi c·∫•p ƒë·ªô c·ªßa ch√∫ng trong s∆° ƒë·ªì):
---
${truncatedContent}
---
${isTruncated ? "\L∆ØU √ù: N·ªôi dung tr√™n c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c r√∫t g·ªçn do gi·ªõi h·∫°n ƒë·ªô d√†i.\n" : ""}
Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o m·ªôt b·∫£n t√≥m t·∫Øt m·∫°ch l·∫°c, s√∫c t√≠ch v√† ch√≠nh x√°c (kho·∫£ng 3 ƒë·∫øn 7 c√¢u vƒÉn, ho·∫∑c nhi·ªÅu h∆°n m·ªôt ch√∫t n·∫øu c·∫ßn thi·∫øt ƒë·ªÉ bao qu√°t √Ω ch√≠nh) v·ªÅ nh√°nh s∆° ƒë·ªì t∆∞ duy n√†y. B·∫£n t√≥m t·∫Øt c·∫ßn:
1. N√™u b·∫≠t ƒë∆∞·ª£c √Ω t∆∞·ªüng ho·∫∑c ch·ªß ƒë·ªÅ ch√≠nh c·ªßa n√∫t g·ªëc.
2. ƒê·ªÅ c·∫≠p ƒë·∫øn c√°c ch·ªß ƒë·ªÅ con ho·∫∑c c√°c kh√≠a c·∫°nh quan tr·ªçng nh·∫•t ƒë∆∞·ª£c ph√°t tri·ªÉn trong nh√°nh.
3. Ch·ªâ ra ƒë∆∞·ª£c m·ªëi quan h·ªá logic ch√≠nh y·∫øu ho·∫∑c d√≤ng ch·∫£y √Ω t∆∞·ªüng trong nh√°nh (n·∫øu c√≥).
4. S·ª≠ d·ª•ng ng√¥n ng·ªØ r√µ r√†ng, d·ªÖ hi·ªÉu.
H√£y cung c·∫•p b·∫£n t√≥m t·∫Øt d∆∞·ªõi d·∫°ng m·ªôt ƒëo·∫°n vƒÉn b·∫£n duy nh·∫•t.`;

    showLoadingIndicator("AI ƒëang t√≥m t·∫Øt nh√°nh...");
    try {
        const result = await generativeModel.generateContent(prompt);
        const response = result.response;
        const summaryText = response.text().trim();
        const rootNodeTextPreview = (rootNodeData.text || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ").substring(0, 30) + ((rootNodeData.text || "").length > 30 ? "..." : "");

        if (summaryText) {
            // Create a new node as a child of the summarized node to display the summary
            const parentShape = targetNodeKonva.findOne('.nodeShape');
            const parentHeight = parentShape ? parentShape.height() : DEFAULT_NODE_STYLE.minHeight;
            const parentWidth = parentShape ? parentShape.width() : DEFAULT_NODE_STYLE.width;


            const newNodeData = {
                mapId: currentMindMapId,
                parentId: rootNodeId, // Child of the node that was summarized
                text: `üìÑ T√≥m t·∫Øt nh√°nh:\n${summaryText}`,
                position: {
                    x: targetNodeKonva.x() + parentWidth / 4 + 10, // Position it near the parent
                    y: targetNodeKonva.y() + parentHeight + 35
                },
                style: {
                    ...DEFAULT_NODE_STYLE,
                    backgroundColor: "#FFFDE7", // Light yellow for summary
                    textColor: "#4E342E", // Dark brown text
                    borderColor: "#FFD54F", // Amber border
                    shape: "roundedRectangle",
                    cornerRadius: 6,
                    width: 250, // Wider for summary
                    minHeight: 70,
                    fontSize: 13,
                    icon: 'üìÑ'
                },
                createdAt: serverTimestamp()
            };
            await addDoc(collection(db, "nodes"), newNodeData);
            alert(`AI ƒë√£ t·∫°o m·ªôt n√∫t t√≥m t·∫Øt con cho nh√°nh "${rootNodeTextPreview}".`);

        } else {
             openAiResponseModal(
                `AI T√≥m t·∫Øt nh√°nh: "${rootNodeTextPreview}"`,
                truncatedContent, // Show what was sent to AI
                "AI kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt cho nh√°nh n√†y v√†o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra n·ªôi dung nh√°nh."
            );
        }
    } catch (error) {
        console.error("Error calling Gemini API (summarizeBranchWithAI):", error);
        let userMessage = "L·ªói khi AI t√≥m t·∫Øt nh√°nh: " + error.message;
         if (error.message?.includes("API key not valid")) { userMessage += "\nVui l√≤ng ki·ªÉm tra l·∫°i thi·∫øt l·∫≠p API Key trong Firebase Console cho Gemini API."; }
        else if (error.message?.includes("429") || error.message?.toLowerCase().includes("quota")) { userMessage = "B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu t·ªõi AI ho·∫∑c ƒë√£ h·∫øt h·∫°n ng·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t."; }
        else if (error.message?.toLowerCase().includes("model not found")){ userMessage = "Model AI kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n model ƒë√£ c·∫•u h√¨nh.";}
        else if (error.message?.toLowerCase().includes("candidate.safetyRatings")){ userMessage = "Ph·∫£n h·ªìi t·ª´ AI b·ªã ch·∫∑n do v·∫•n ƒë·ªÅ an to√†n n·ªôi dung.";}
        openAiResponseModal( `L·ªói AI khi t√≥m t·∫Øt nh√°nh`, truncatedContent, userMessage );
    } finally {
        hideLoadingIndicator();
    }
}
async function generateActionPlanWithAI(targetNodeKonva) {
    if (!generativeModel || !targetNodeKonva || !currentMindMapId || !currentUser || !db) {
        alert("Ch·ª©c nƒÉng AI ch∆∞a s·∫µn s√†ng ho·∫∑c kh√¥ng c√≥ n√∫t n√†o ƒë∆∞·ª£c ch·ªçn.");
        hideContextMenu(); return;
    }
    const targetNodeId = targetNodeKonva.id();
    const targetNodeData = allNodesDataForCurrentMap.find(n => n.id === targetNodeId);
    if (!targetNodeData || !targetNodeData.text || targetNodeData.text.trim() === "") {
        alert("N√∫t ƒë∆∞·ª£c ch·ªçn kh√¥ng c√≥ n·ªôi dung ho·∫∑c n·ªôi dung kh√¥ng h·ª£p l·ªá ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch h√†nh ƒë·ªông.");
        hideContextMenu(); return;
    }

    const nodeContent = targetNodeData.text.trim();
    const contextPath = getNodeContextPath(targetNodeId, allNodesDataForCurrentMap); // Get context from ancestors
    const nodeContentPreview = nodeContent.substring(0, 30) + (nodeContent.length > 30 ? "..." : "");

    showLoadingIndicator("AI ƒëang t·∫°o k·∫ø ho·∫°ch h√†nh ƒë·ªông...");
    hideContextMenu();

    const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n nghi·ªáp trong vi·ªác l·∫≠p k·∫ø ho·∫°ch v√† ƒë·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c h√†nh ƒë·ªông.
D·ª±a tr√™n m·ª•c ti√™u ho·∫∑c v·∫•n ƒë·ªÅ ƒë∆∞·ª£c m√¥ t·∫£ d∆∞·ªõi ƒë√¢y:
"${nodeContent}"
N√∫t n√†y n·∫±m trong ng·ªØ c·∫£nh c·ªßa nh√°nh: "${contextPath}"

H√£y ƒë·ªÅ xu·∫•t m·ªôt k·∫ø ho·∫°ch h√†nh ƒë·ªông s∆° b·ªô, bao g·ªìm t·ª´ 3 ƒë·∫øn 5 b∆∞·ªõc c·ª• th·ªÉ, r√µ r√†ng v√† c√≥ t√≠nh kh·∫£ thi cao ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u ho·∫∑c gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ ƒë√£ n√™u. M·ªói b∆∞·ªõc n√™n:
1. B·∫Øt ƒë·∫ßu b·∫±ng m·ªôt ƒë·ªông t·ª´ h√†nh ƒë·ªông m·∫°nh m·∫Ω (v√≠ d·ª•: Ph√¢n t√≠ch, X√°c ƒë·ªãnh, Thi·∫øt k·∫ø, X√¢y d·ª±ng, Tri·ªÉn khai, Ki·ªÉm tra, ƒê√°nh gi√°, T·ªëi ∆∞u h√≥a).
2. M√¥ t·∫£ ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß v·ªÅ h√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán.
3. C√≥ th·ªÉ ƒë∆∞·ª£c th·ª±c hi·ªán m·ªôt c√°ch ƒë·ªôc l·∫≠p ho·∫∑c theo tr√¨nh t·ª± logic.
Vui l√≤ng tr√¨nh b√†y to√†n b·ªô k·∫ø ho·∫°ch d∆∞·ªõi d·∫°ng m·ªôt kh·ªëi vƒÉn b·∫£n, v·ªõi m·ªói b∆∞·ªõc h√†nh ƒë·ªông tr√™n m·ªôt d√≤ng ri√™ng bi·ªát, b·∫Øt ƒë·∫ßu b·∫±ng s·ªë th·ª© t·ª± (v√≠ d·ª•: 1. ..., 2. ...).`;

    try {
        const result = await generativeModel.generateContent(prompt);
        const response = result.response;
        const actionPlanText = response.text().trim();

        if (actionPlanText) {
            const parentShape = targetNodeKonva.findOne('.nodeShape');
            const parentHeight = parentShape ? parentShape.height() : DEFAULT_NODE_STYLE.minHeight;
            const parentWidth = parentShape ? parentShape.width() : DEFAULT_NODE_STYLE.width;

            const newNodeData = {
                mapId: currentMindMapId,
                parentId: targetNodeId, // Child of the node the plan is for
                text: `üöÄ K·∫ø ho·∫°ch h√†nh ƒë·ªông:\n${actionPlanText}`,
                position: {
                    x: targetNodeKonva.x() + parentWidth / 4 + 10,
                    y: targetNodeKonva.y() + parentHeight + 35
                },
                style: {
                    ...DEFAULT_NODE_STYLE,
                    backgroundColor: "#E3F2FD", // Light blue for action plan
                    textColor: "#0D47A1", // Dark blue text
                    borderColor: "#90CAF9", // Lighter blue border
                    shape: "roundedRectangle",
                    cornerRadius: 4,
                    width: 280, // Wider for action plan
                    minHeight: 80,
                    fontSize: 13,
                    icon: 'üöÄ'
                },
                createdAt: serverTimestamp()
            };
            await addDoc(collection(db, "nodes"), newNodeData);
            alert(`AI ƒë√£ t·∫°o m·ªôt n√∫t k·∫ø ho·∫°ch h√†nh ƒë·ªông cho "${nodeContentPreview}".`);

        } else {
            openAiResponseModal(
                `K·∫ø ho·∫°ch h√†nh ƒë·ªông cho: "${nodeContentPreview}"`,
                `M·ª•c ti√™u/V·∫•n ƒë·ªÅ: ${nodeContent}`,
                "AI kh√¥ng th·ªÉ t·∫°o k·∫ø ho·∫°ch h√†nh ƒë·ªông cho m·ª•c ti√™u n√†y v√†o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i."
            );
        }
    } catch (error) {
        console.error("Error calling Gemini API (generateActionPlanWithAI):", error);
        let userMessage = "L·ªói khi AI t·∫°o k·∫ø ho·∫°ch h√†nh ƒë·ªông: " + error.message;
        if (error.message?.includes("API key not valid")) { userMessage += "\nVui l√≤ng ki·ªÉm tra l·∫°i thi·∫øt l·∫≠p API Key trong Firebase Console cho Gemini API."; }
        else if (error.message?.includes("429") || error.message?.toLowerCase().includes("quota")) { userMessage = "B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu t·ªõi AI ho·∫∑c ƒë√£ h·∫øt h·∫°n ng·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t."; }
        else if (error.message?.toLowerCase().includes("model not found")){ userMessage = "Model AI kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n model ƒë√£ c·∫•u h√¨nh.";}
        else if (error.message?.toLowerCase().includes("candidate.safetyRatings")){ userMessage = "Ph·∫£n h·ªìi t·ª´ AI b·ªã ch·∫∑n do v·∫•n ƒë·ªÅ an to√†n n·ªôi dung.";}
        openAiResponseModal(
            `L·ªói AI khi t·∫°o k·∫ø ho·∫°ch h√†nh ƒë·ªông`,
            `M·ª•c ti√™u/V·∫•n ƒë·ªÅ: ${nodeContent}`,
            userMessage
        );
    } finally {
        hideLoadingIndicator();
    }
}

async function generateOutlineWithAI(targetNodeKonva) {
    console.log("Attempting to generate outline with AI for node:", targetNodeKonva.id()); // Debug log
    if (!generativeModel || !targetNodeKonva || !currentMindMapId || !currentUser || !db) {
        alert("Ch·ª©c nƒÉng AI ch∆∞a s·∫µn s√†ng ho·∫∑c kh√¥ng c√≥ n√∫t n√†o ƒë∆∞·ª£c ch·ªçn.");
        hideContextMenu(); return;
    }
    const rootNodeId = targetNodeKonva.id();
    const rootNodeData = allNodesDataForCurrentMap.find(n => n.id === rootNodeId);
    if (!rootNodeData) {
        alert("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho n√∫t g·ªëc c·ªßa nh√°nh.");
        hideContextMenu(); return;
    }

    showLoadingIndicator("AI ƒëang t·∫°o d√†n √Ω...");
    hideContextMenu();

    const branchTextsArray = [];
    // Collect all text from the branch, maintaining hierarchy for the prompt
    function collectBranchTextForOutline(nodeId, allNodes, level, collectedTexts) {
        const node = allNodes.find(n => n.id === nodeId);
        if (!node) return;

        const indent = '  '.repeat(level); // Use 2 spaces for Markdown sub-levels
        collectedTexts.push(`${indent}- ${node.text || ""}`); // Markdown list item format

        const children = allNodes.filter(n => n.parentId === nodeId);
        // Sort children to maintain a consistent order in the outline if needed
        children.sort((a, b) => a.text.localeCompare(b.text)); // Simple alphabetical sort for consistency

        for (const child of children) {
            collectBranchTextForOutline(child.id, allNodes, level + 1, collectedTexts);
        }
    }

    collectBranchTextForOutline(rootNodeId, allNodesDataForCurrentMap, 0, branchTextsArray);

    if (branchTextsArray.length === 0) {
        alert("Kh√¥ng c√≥ d·ªØ li·ªáu vƒÉn b·∫£n trong nh√°nh n√†y ƒë·ªÉ t·∫°o d√†n √Ω.");
        hideLoadingIndicator(); return;
    }

    const branchContentForPrompt = branchTextsArray.join('\n');
    const maxContentLength = 15000; // Adjust as needed, consider token limits for the model
    let truncatedContent = branchContentForPrompt;
    let isTruncated = false;
    if (branchContentForPrompt.length > maxContentLength) {
        console.warn("N·ªôi dung nh√°nh qu√° d√†i, ƒë√£ ƒë∆∞·ª£c c·∫Øt b·ªõt ƒë·ªÉ g·ª≠i cho AI.");
        truncatedContent = branchContentForPrompt.substring(0, maxContentLength) + "\n... (n·ªôi dung ƒë√£ ƒë∆∞·ª£c c·∫Øt b·ªõt do qu√° d√†i)";
        isTruncated = true;
    }

    const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n nghi·ªáp trong vi·ªác t·∫°o d√†n √Ω.
D∆∞·ªõi ƒë√¢y l√† c·∫•u tr√∫c v√† n·ªôi dung c·ªßa m·ªôt nh√°nh s∆° ƒë·ªì t∆∞ duy, ƒë∆∞·ª£c tr√¨nh b√†y theo ƒë·ªãnh d·∫°ng Markdown v·ªõi c√°c c·∫•p ƒë·ªô th·ª•t l·ªÅ:
---
${truncatedContent}
---
${isTruncated ? "\L∆ØU √ù: N·ªôi dung tr√™n c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c r√∫t g·ªçn do gi·ªõi h·∫°n ƒë·ªô d√†i.\n" : ""}
Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o m·ªôt d√†n √Ω chi ti·∫øt cho m·ªôt b√†i thuy·∫øt tr√¨nh, b√°o c√°o ho·∫∑c t√†i li·ªáu, d·ª±a tr√™n c·∫•u tr√∫c v√† √Ω t∆∞·ªüng c·ªßa nh√°nh s∆° ƒë·ªì t∆∞ duy n√†y.
D√†n √Ω c·∫ßn tu√¢n th·ªß c√°c quy t·∫Øc sau:
1.  S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng Markdown v·ªõi ti√™u ƒë·ªÅ c·∫•p ƒë·ªô (headings: #, ##, ###) v√† danh s√°ch (bullet points: * ho·∫∑c -) ƒë·ªÉ th·ªÉ hi·ªán c·∫•u tr√∫c ph√¢n c·∫•p.
2.  Ti√™u ƒë·ªÅ c·∫•p 1 (#) cho ch·ªß ƒë·ªÅ ch√≠nh (n√∫t g·ªëc c·ªßa nh√°nh).
3.  Ti√™u ƒë·ªÅ c·∫•p 2 (##) cho c√°c √Ω ch√≠nh c·∫•p ƒë·ªô 1 (con tr·ª±c ti·∫øp c·ªßa n√∫t g·ªëc).
4.  Ti√™u ƒë·ªÅ c·∫•p 3 (###) ho·∫∑c danh s√°ch con (bullet points) cho c√°c √Ω ph·ª• c·∫•p ƒë·ªô 2 tr·ªü xu·ªëng.
5.  M·ªói m·ª•c trong d√†n √Ω n√™n ng·∫Øn g·ªçn, s√∫c t√≠ch, nh∆∞ng ƒë·ªß th√¥ng tin ƒë·ªÉ hi·ªÉu √Ω t∆∞·ªüng.
6.  Kh√¥ng bao g·ªìm b·∫•t k·ª≥ l·ªùi gi·ªõi thi·ªáu hay k·∫øt lu·∫≠n n√†o ngo√†i d√†n √Ω.

H√£y cung c·∫•p d√†n √Ω c·ªßa b·∫°n:`;

    try {
        const result = await generativeModel.generateContent(prompt);
        const response = result.response;
        const outlineText = response.text().trim();
        const rootNodeTextPreview = (rootNodeData.text || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ").substring(0, 30) + ((rootNodeData.text || "").length > 30 ? "..." : "");

        if (outlineText) {
            openAiResponseModal(`üìù D√†n √Ω cho: "${rootNodeTextPreview}"`, truncatedContent, outlineText);
        } else {
            openAiResponseModal(
                `üìù D√†n √Ω cho: "${rootNodeTextPreview}"`,
                truncatedContent,
                "AI kh√¥ng th·ªÉ t·∫°o d√†n √Ω cho nh√°nh n√†y v√†o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra n·ªôi dung nh√°nh."
            );
        }
    } catch (error) {
        console.error("Error calling Gemini API (generateOutlineWithAI):", error);
        let userMessage = "L·ªói khi AI t·∫°o d√†n √Ω: " + error.message;
        if (error.message?.includes("API key not valid")) { userMessage += "\nVui l√≤ng ki·ªÉm tra l·∫°i thi·∫øt l·∫≠p API Key trong Firebase Console cho Gemini API."; }
        else if (error.message?.includes("429") || error.message?.toLowerCase().includes("quota")) { userMessage = "B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu t·ªõi AI ho·∫∑c ƒë√£ h·∫øt h·∫°n ng·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t."; }
        else if (error.message?.toLowerCase().includes("model not found")){ userMessage = "Model AI kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n model ƒë√£ c·∫•u h√¨nh.";}
        else if (error.message?.toLowerCase().includes("candidate.safetyRatings")){ userMessage = "Ph·∫£n h·ªìi t·ª´ AI b·ªã ch·∫∑n do v·∫•n ƒë·ªÅ an to√†n n·ªôi dung.";}
        openAiResponseModal( `L·ªói AI khi t·∫°o d√†n √Ω`, truncatedContent, userMessage );
    } finally {
        hideLoadingIndicator();
    }
}

// NEW: AI-driven Layout Optimization
async function optimizeLayoutWithAI(targetNodeId = null) {
    console.log("Attempting to optimize layout with AI. Target Node ID:", targetNodeId); // Debug log
    if (!currentKonvaStage || !currentKonvaLayer || !currentMindMapId || !db || !currentUser) {
        alert("Kh√¥ng th·ªÉ t·ªëi ∆∞u h√≥a b·ªë c·ª•c. Canvas ho·∫∑c c∆° s·ªü d·ªØ li·ªáu ch∆∞a s·∫µn s√†ng.");
        return;
    }

    // FIX: Check if there are any nodes to optimize at all
    if (allNodesDataForCurrentMap.length === 0) {
        alert("Kh√¥ng c√≥ n√∫t n√†o trong s∆° ƒë·ªì ƒë·ªÉ t·ªëi ∆∞u h√≥a b·ªë c·ª•c.");
        hideLoadingIndicator();
        return;
    }

    showLoadingIndicator("AI ƒëang t·ªëi ∆∞u h√≥a b·ªë c·ª•c s∆° ƒë·ªì...");

    let nodesToOptimize = [];
    let rootNodeForLayout = null;

    if (targetNodeId) {
        // Optimize a specific branch
        rootNodeForLayout = allNodesDataForCurrentMap.find(n => n.id === targetNodeId);
        if (!rootNodeForLayout) {
            alert("Kh√¥ng t√¨m th·∫•y n√∫t ƒë·ªÉ t·ªëi ∆∞u h√≥a b·ªë c·ª•c.");
            hideLoadingIndicator();
            return;
        }
        // Collect all nodes in the branch
        const branchNodeIds = [rootNodeId].concat(findAllDescendantNodeIds(rootNodeId, allNodesDataForCurrentMap));
        nodesToOptimize = allNodesDataForCurrentMap.filter(n => branchNodeIds.includes(n.id));
        console.log("Optimizing branch nodes:", nodesToOptimize.map(n => n.text));
    } else {
        // Optimize the entire map
        nodesToOptimize = [...allNodesDataForCurrentMap];
        // Find a suitable root if optimizing entire map without a specified target
        // Prioritize a node with parentId === null, otherwise pick the first node
        rootNodeForLayout = allNodesDataForCurrentMap.find(n => n.parentId === null);
        if (!rootNodeForLayout && nodesToOptimize.length > 0) {
            rootNodeForLayout = nodesToOptimize[0]; // Fallback to first node if no explicit root
        }
        console.log("Optimizing entire map. Root node:", rootNodeForLayout?.text);
    }

    // FIX: If after determining the scope, nodesToOptimize is still empty or rootNodeForLayout is null
    if (nodesToOptimize.length === 0 || !rootNodeForLayout) {
        alert("Kh√¥ng t√¨m th·∫•y n√∫t n√†o ph√π h·ª£p ƒë·ªÉ t·ªëi ∆∞u h√≥a b·ªë c·ª•c. ƒê·∫£m b·∫£o s∆° ƒë·ªì c√≥ √≠t nh·∫•t m·ªôt n√∫t.");
        hideLoadingIndicator();
        return;
    }

    // Prepare data for layout algorithm: convert to a simpler graph structure
    const graphNodes = nodesToOptimize.map(node => ({
        id: node.id,
        text: node.text,
        parentId: node.parentId,
        level: node.level, // Use existing level or calculate if needed
        width: node.style?.width || DEFAULT_NODE_STYLE.width,
        height: node.style?.minHeight || DEFAULT_NODE_STYLE.minHeight, // Use minHeight for layout calc
    }));

    // Simple hierarchical layout algorithm (for demonstration)
    // This is a basic implementation and can be replaced with more sophisticated algorithms
    const layoutAlgorithm = (nodes, rootId, initialX, initialY, horizontalSpacing, verticalSpacing) => {
        const positions = {};
        const childrenMap = new Map();
        nodes.forEach(node => {
            if (node.parentId) {
                if (!childrenMap.has(node.parentId)) {
                    childrenMap.set(node.parentId, []);
                }
                childrenMap.get(node.parentId).push(node);
            }
        });

        // Sort children for consistent layout
        childrenMap.forEach(children => {
            children.sort((a, b) => a.text.localeCompare(b.text));
        });

        const queue = [{ id: rootId, x: initialX, y: initialY, level: 0 }];
        const visited = new Set();
        let currentLevelY = { 0: initialY }; // Tracks Y position for each level
        let currentLevelMaxX = { 0: initialX + (nodes.find(n => n.id === rootId)?.width || DEFAULT_NODE_STYLE.width) / 2 }; // Tracks max X for each level

        while (queue.length > 0) {
            const current = queue.shift();
            if (visited.has(current.id)) continue;
            visited.add(current.id);

            positions[current.id] = { x: current.x, y: current.y };

            const directChildren = childrenMap.get(current.id) || [];
            let childStartX = current.x - (directChildren.length - 1) * (horizontalSpacing + DEFAULT_NODE_STYLE.width) / 2; // Center children under parent

            directChildren.forEach((child, index) => {
                const childLevel = current.level + 1;
                const childY = (currentLevelY[childLevel] || (current.y + (nodes.find(n => n.id === current.id)?.height || DEFAULT_NODE_STYLE.minHeight) + verticalSpacing));
                
                let childX = childStartX + index * (DEFAULT_NODE_STYLE.width + horizontalSpacing);

                // Adjust X to avoid overlap with previous nodes on the same level
                if (currentLevelMaxX[childLevel] && childX < currentLevelMaxX[childLevel] + horizontalSpacing) {
                    childX = currentLevelMaxX[childLevel] + horizontalSpacing;
                }

                queue.push({ id: child.id, x: childX, y: childY, level: childLevel });
                currentLevelY[childLevel] = childY;
                currentLevelMaxX[childLevel] = childX + DEFAULT_NODE_STYLE.width;
            });
        }
        return positions;
    };

    // Find the actual root node for the layout
    let layoutRootId = rootNodeForLayout.id;
    
    // No need for this check anymore, as it's handled above
    // if (!layoutRootId) {
    //     alert("Kh√¥ng t√¨m th·∫•y node g·ªëc ƒë·ªÉ t·ªëi ∆∞u h√≥a b·ªë c·ª•c.");
    //     hideLoadingIndicator();
    //     return;
    // }


    const initialX = (currentKonvaStage.width() / 2) - (rootNodeForLayout.width / 2 || DEFAULT_NODE_STYLE.width / 2);
    const initialY = 50;
    const horizontalSpacing = 80;
    const verticalSpacing = 60;

    const newPositions = layoutAlgorithm(graphNodes, layoutRootId, initialX, initialY, horizontalSpacing, verticalSpacing);

    // Apply updates to Firestore in a batch
    const batch = writeBatch(db);
    let updatesCount = 0;
    nodesToOptimize.forEach(node => {
        const newPos = newPositions[node.id];
        if (newPos && (node.position.x !== newPos.x || node.position.y !== newPos.y)) {
            batch.update(doc(db, "nodes", node.id), { position: newPos });
            updatesCount++;
        }
    });

    try {
        if (updatesCount > 0) {
            await batch.commit();
            alert(`AI ƒë√£ t·ªëi ∆∞u h√≥a b·ªë c·ª•c cho ${updatesCount} n√∫t.`);
        } else {
            alert("Kh√¥ng c√≥ thay ƒë·ªïi b·ªë c·ª•c ƒë√°ng k·ªÉ n√†o ƒë∆∞·ª£c AI ƒë·ªÅ xu·∫•t.");
        }
    } catch (error) {
        console.error("Error optimizing layout:", error);
        alert("L·ªói khi t·ªëi ∆∞u h√≥a b·ªë c·ª•c: " + error.message);
    } finally {
        hideLoadingIndicator();
    }
}


async function handleGenerateMindmapFromText() {
    if (!generativeModel || !db || !currentUser) {
        alert("Ch·ª©c nƒÉng AI ch∆∞a s·∫µn s√†ng ho·∫∑c b·∫°n ch∆∞a ƒëƒÉng nh·∫≠p.");
        return;
    }

    const textContent = aiTextInput.value.trim();
    if (!textContent) {
        alert("Vui l√≤ng d√°n vƒÉn b·∫£n v√†o √¥ ƒë·ªÉ AI c√≥ th·ªÉ t·∫°o s∆° ƒë·ªì t∆∞ duy.");
        return;
    }

    const mapTitle = aiMindmapTitleInput.value.trim() || `S∆° ƒë·ªì AI t·ª´ vƒÉn b·∫£n (${new Date().toLocaleDateString()})`;

    showLoadingIndicator("AI ƒëang ƒë·ªçc vƒÉn b·∫£n v√† t·∫°o s∆° ƒë·ªì t∆∞ duy...");

    // C·∫•u tr√∫c prompt ƒë·ªÉ AI tr·∫£ v·ªÅ d·ªØ li·ªáu c√≥ c·∫•u tr√∫c
    const prompt = `B·∫°n l√† m·ªôt chuy√™n gia t·∫°o s∆° ƒë·ªì t∆∞ duy. H√£y ƒë·ªçc vƒÉn b·∫£n sau v√† chuy·ªÉn ƒë·ªïi n√≥ th√†nh m·ªôt c·∫•u tr√∫c s∆° ƒë·ªì t∆∞ duy.
S∆° ƒë·ªì t∆∞ duy c·∫ßn ƒë∆∞·ª£c c·∫•u tr√∫c theo ƒë·ªãnh d·∫°ng Markdown ƒë∆∞·ª£c th·ª•t l·ªÅ, trong ƒë√≥ m·ªói d√≤ng l√† m·ªôt n√∫t s∆° ƒë·ªì t∆∞ duy.
- N√∫t g·ªëc (c·∫•p 0) l√† √Ω t∆∞·ªüng ch√≠nh ho·∫∑c ti√™u ƒë·ªÅ bao qu√°t c·ªßa vƒÉn b·∫£n.
- C√°c n√∫t con (c·∫•p 1, 2, v.v.) ƒë∆∞·ª£c th·ª•t l·ªÅ b·∫±ng c√°ch s·ª≠ d·ª•ng d·∫•u g·∫°ch ngang v√† d·∫•u c√°ch ('- ').
- Gi·ªõi h·∫°n n·ªôi dung m·ªói n√∫t kho·∫£ng 10-50 t·ª´, c√¥ ƒë·ªçng √Ω ch√≠nh.
- Tr√°nh l·∫∑p l·∫°i n·ªôi dung gi·ªëng h·ªát nhau.
- T·∫≠p trung v√†o vi·ªác t·∫°o ra m·ªôt c·∫•u tr√∫c logic v√† d·ªÖ hi·ªÉu.
- Kh√¥ng bao g·ªìm b·∫•t k·ª≥ vƒÉn b·∫£n gi·ªõi thi·ªáu hay k·∫øt lu·∫≠n n√†o ngo√†i c·∫•u tr√∫c s∆° ƒë·ªì t∆∞ duy.
- Kh√¥ng ƒë√°nh s·ªë, ch·ªâ d√πng d·∫•u g·∫°ch ƒë·∫ßu d√≤ng.

V√≠ d·ª• ƒë·ªãnh d·∫°ng ƒë·∫ßu ra mong mu·ªën:
- N√∫t g·ªëc c·ªßa s∆° ƒë·ªì t∆∞ duy
  - N√∫t con c·∫•p 1 c·ªßa g·ªëc
    - N√∫t con c·∫•p 2 c·ªßa c·∫•p 1
    - N√∫t con c·∫•p 2 kh√°c
  - N√∫t con c·∫•p 1 th·ª© hai
- N√∫t g·ªëc th·ª© hai (n·∫øu c√≥ nhi·ªÅu √Ω ch√≠nh ƒë·ªôc l·∫≠p trong vƒÉn b·∫£n)

VƒÉn b·∫£n ƒë·∫ßu v√†o:
---
${textContent}
---

H√£y b·∫Øt ƒë·∫ßu s∆° ƒë·ªì t∆∞ duy c·ªßa b·∫°n:`;

    try {
        const result = await generativeModel.generateContent(prompt);
        const response = result.response;
        const mindmapStructureText = response.text().trim();

        console.log("AI Raw Response (Mindmap Structure):", mindmapStructureText); // DEBUG: Check AI's raw output

        if (!mindmapStructureText) {
            alert("AI kh√¥ng th·ªÉ t·∫°o c·∫•u tr√∫c s∆° ƒë·ªì t∆∞ duy t·ª´ vƒÉn b·∫£n n√†y. Vui l√≤ng th·ª≠ l·∫°i v·ªõi n·ªôi dung kh√°c ho·∫∑c ƒë·ªãnh d·∫°ng r√µ r√†ng h∆°n.");
            openAiResponseModal("Ph·∫£n h·ªìi AI tr·ªëng", textContent, "AI kh√¥ng t·∫°o ra c·∫•u tr√∫c s∆° ƒë·ªì t∆∞ duy. Vui l√≤ng th·ª≠ l·∫°i.");
            return;
        }

        // T·∫°o m·ªôt s∆° ƒë·ªì t∆∞ duy m·ªõi trong Firestore
        const mindMapData = {
            userId: currentUser.uid,
            title: mapTitle,
            createdAt: serverTimestamp(),
            lastModified: serverTimestamp(),
            type: 'ai', // NEW: Add type for AI mind map
            canvasState: { scaleX: 1, scaleY: 1, x: 0, y: 0 }
        };
        const mindMapDocRef = await addDoc(collection(db, "mindmaps"), mindMapData);
        const newMindmapId = mindMapDocRef.id;

        const nodesToCreate = parseMindmapStructure(mindmapStructureText, newMindmapId);

        if (nodesToCreate.length === 0) {
            alert("AI ƒë√£ t·∫°o vƒÉn b·∫£n, nh∆∞ng kh√¥ng th·ªÉ ph√¢n t√≠ch th√†nh c√°c n√∫t. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi c·ªßa AI trong console.");
            openAiResponseModal("L·ªói ph√¢n t√≠ch s∆° ƒë·ªì AI", textContent, mindmapStructureText);
            return;
        }

        const batch = writeBatch(db);
        const nodeStyleBase = { ...DEFAULT_NODE_STYLE, width: 150, minHeight: 50, padding: 10, cornerRadius: 5 };

        // Map to store information about created nodes for positioning children
        const createdNodeMap = new Map(); // Map tempId to { actualFirestoreId, x, y, style }

        // Track last position for each level to prevent direct overlaps
        const lastNodePosPerLevel = {}; // { level: { x, y, width, height } }

        // Function to recursively calculate positions and add to batch
        const addNodeToBatch = (node, parentNodeInfo = null) => {
            const newNodeFirestoreId = doc(collection(db, "nodes")).id;

            let actualX, actualY;
            let nodeCalculatedStyle = { ...nodeStyleBase };

            const canvasWidth = konvaContainer?.clientWidth || 800;
            const canvasHeight = konvaContainer?.clientHeight || 600;

            if (node.level === 0) { // Root node
                actualX = canvasWidth / 2 - (nodeStyleBase.width / 2); // Center horizontally
                actualY = 50; // Start near top

                // If there's a previous root, stack below it
                const previousRoot = nodesToCreate.filter(n => n.level === 0 && nodesToCreate.indexOf(n) < nodesToCreate.indexOf(node)).pop();
                if (previousRoot && createdNodeMap.has(previousRoot.tempId)) {
                    const prevRootInfo = createdNodeMap.get(previousRoot.tempId);
                    actualY = prevRootInfo.y + prevRootInfo.style.minHeight + 80; // Stack below previous root
                }

                nodeCalculatedStyle = { ...nodeStyleBase, backgroundColor: "#1877f2", textColor: "#ffffff", borderColor: "#0e5aab", shape: "ellipse", minHeight: 60, fontSize: 16 };
            } else if (parentNodeInfo) {
                const horizontalOffset = 100; // Base horizontal offset from parent
                const verticalOffset = 70;   // Base vertical offset from parent

                // Simple fan-out: alternate left/right for direct children (level 1)
                // For deeper levels, just offset from parent.
                if (node.level === 1) {
                     // Position children of level 0 nodes in a fan-out
                    const siblings = nodesToCreate.filter(n => n.parentId === node.parentId);
                    const siblingIndex = siblings.findIndex(s => s.tempId === node.tempId);

                    const angleStep = (Math.PI * 0.8) / Math.max(1, siblings.length - 1); // Spread over 180 degrees
                    const baseAngle = -Math.PI * 0.4; // Start slightly left of vertical
                    const currentAngle = baseAngle + (siblingIndex * angleStep);

                    const radius = 200; // Distance from parent
                    actualX = parentNodeInfo.x + parentNodeInfo.style.width / 2 + radius * Math.cos(currentAngle) - nodeStyleBase.width / 2;
                    actualY = parentNodeInfo.y + parentNodeInfo.style.minHeight / 2 + radius * Math.sin(currentAngle) - nodeStyleBase.minHeight / 2;

                } else {
                    // For deeper levels, just place below and slightly right of parent
                    actualX = parentNodeInfo.x + 50;
                    actualY = parentNodeInfo.y + parentNodeInfo.style.minHeight + 60;

                    // To avoid direct overlap, check last node at this level
                    if (lastNodePosPerLevel[node.level]) {
                        const lastNodeInfo = lastNodePosPerLevel[node.level];
                        // If new node would overlap horizontally, move it to the right
                        if (actualX < lastNodeInfo.x + lastNodeInfo.width + 20 && actualY < lastNodeInfo.y + lastNodeInfo.height + 20) {
                            actualX = lastNodeInfo.x + lastNodeInfo.width + 50;
                        }
                    }
                }

                // Apply style based on level
                if (node.level === 1) {
                    nodeCalculatedStyle = { ...nodeStyleBase, backgroundColor: "#E3F2FD", textColor: "#0D47A1", borderColor: "#90CAF9", shape: "roundedRectangle", cornerRadius: 8, fontSize: 14 };
                } else if (node.level === 2) {
                    nodeCalculatedStyle = { ...nodeStyleBase, backgroundColor: "#F0F4C3", textColor: "#33691E", borderColor: "#C5E1A5", shape: "rectangle", cornerRadius: 5, fontSize: 13 };
                } else { // Deeper levels
                    nodeCalculatedStyle = { ...nodeStyleBase, backgroundColor: "#FBE9E7", textColor: "#BF360C", borderColor: "#FFAB91", shape: "rectangle", cornerRadius: 3, fontSize: 12 };
                }

            } else { // Fallback, should ideally not be hit for non-root nodes
                actualX = 100;
                actualY = 100;
                console.warn("Node without parent or level 0, using fallback position:", node);
            }

            // Ensure positions are not negative
            actualX = Math.max(10, actualX);
            actualY = Math.max(10, actualY);

            const nodeDataForFirestore = {
                mapId: newMindmapId,
                parentId: parentNodeInfo ? parentNodeInfo.actualFirestoreId : null,
                text: node.text,
                position: { x: actualX, y: actualY },
                style: nodeCalculatedStyle,
                createdAt: serverTimestamp()
            };

            const nodeRef = doc(db, "nodes", newNodeFirestoreId);
            batch.set(nodeRef, nodeDataForFirestore);

            // Store info for children positioning and collision avoidance
            createdNodeMap.set(node.tempId, {
                actualFirestoreId: newNodeFirestoreId,
                x: actualX,
                y: actualY,
                style: nodeCalculatedStyle,
                level: node.level
            });

            // Update last position for this level
            lastNodePosPerLevel[node.level] = {
                x: actualX,
                y: actualY,
                width: nodeCalculatedStyle.width,
                height: nodeCalculatedStyle.minHeight // Use minHeight for simple bounding box
            };

            console.log(`Node created: ${node.text} (Level: ${node.level}, Parent: ${node.parentId ? node.parentId.substring(0,5) : 'None'}) at (${actualX}, ${actualY})`); // DEBUG: Node creation info
        };

        // Recursively add nodes to batch, maintaining parent info
        const processNodesRecursively = (parentNodeTempId, parentNodeInfo) => {
            const children = nodesToCreate.filter(n => n.parentId === parentNodeTempId);
            // Sort children to ensure consistent layout
            children.sort((a, b) => nodesToCreate.indexOf(a) - nodesToCreate.indexOf(b)); // Sort by original order

            for (const child of children) {
                addNodeToBatch(child, parentNodeInfo);
                processNodesRecursively(child.tempId, createdNodeMap.get(child.tempId));
            }
        };

        // Start processing from root nodes
        const rootNodes = nodesToCreate.filter(n => n.level === 0);
        // Sort root nodes by their original order in the parsed text
        rootNodes.sort((a, b) => nodesToCreate.indexOf(a) - nodesToCreate.indexOf(b));

        for (const root of rootNodes) {
            addNodeToBatch(root, null); // Add root node (no parentInfo)
            processNodesRecursively(root.tempId, createdNodeMap.get(root.tempId)); // Process its children
        }

        await batch.commit();

        aiTextInput.value = ''; // Clear input
        aiMindmapTitleInput.value = ''; // Clear title input
        alert(`AI ƒë√£ t·∫°o s∆° ƒë·ªì t∆∞ duy "${mapTitle}" th√†nh c√¥ng!`);
        showCanvasView(newMindmapId, mapTitle); // Switch to canvas view
    } catch (error) {
        console.error("Error generating mind map from text with AI:", error);
        let userMessage = "L·ªói khi AI t·∫°o s∆° ƒë·ªì t·ª´ vƒÉn b·∫£n: " + error.message;
        if (error.message?.includes("API key not valid")) { userMessage += "\nVui l√≤ng ki·ªÉm tra l·∫°i thi·∫øt l·∫≠p API Key trong Firebase Console cho Gemini API."; }
        else if (error.message?.includes("429") || error.message?.toLowerCase().includes("quota")) { userMessage = "B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu t·ªõi AI ho·∫∑c ƒë√£ h·∫øt h·∫°n ng·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t."; }
        else if (error.message?.toLowerCase().includes("model not found")){ userMessage = "Model AI kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n model ƒë√£ c·∫•u h√¨nh.";}
        else if (error.message?.toLowerCase().includes("candidate.safetyRatings")){ userMessage = "Ph·∫£n h·ªìi t·ª´ AI b·ªã ch·∫∑n do v·∫•n ƒë·ªÅ an to√†n n·ªôi dung. VƒÉn b·∫£n ƒë·∫ßu v√†o c√≥ th·ªÉ ch·ª©a t·ª´ kh√≥a nh·∫°y c·∫£m.";}
        openAiResponseModal("L·ªói AI T·∫°o S∆° ƒë·ªì", textContent, userMessage);
    } finally {
        hideLoadingIndicator();
    }
}


// --- TOOLBAR BUTTON ACTIONS & KEYBOARD SHORTCUTS & ZOOM ---
async function addChildNodeLogic(parentNode) {
    if (!parentNode || !currentMindMapId || !db) return;
    const parentShape = parentNode.findOne('.nodeShape');
    if (!parentShape) {
        console.error("addChildNodeLogic: Could not find '.nodeShape' in parentNode:", parentNode.id());
        alert("L·ªói: Kh√¥ng t√¨m th·∫•y h√¨nh d·∫°ng c·ªßa n√∫t cha ƒë·ªÉ th√™m n√∫t con.");
        return;
    }
    const parentWidth = parentShape.width();
    const parentHeight = parentShape.height();

    const defaultChildStyle = { ...DEFAULT_NODE_STYLE, backgroundColor: "#f9f9f9", textColor: "#333333", borderColor: "#cccccc", shape: "rectangle", cornerRadius: 3, icon: '' };
    const newNodeData = {
        mapId: currentMindMapId,
        parentId: parentNode.id(),
        text: "N√∫t con m·ªõi",
        position: { // Position below and slightly to the right of parent
            x: parentNode.x() + parentWidth / 4,
            y: parentNode.y() + parentHeight + 30
        },
        style: defaultChildStyle,
        createdAt: serverTimestamp()
    };
    try {
        await addDoc(collection(db, "nodes"), newNodeData);
        // Firestore onSnapshot will handle re-rendering
    }
    catch (e) {
        console.error("Error adding child node:", e);
        alert("L·ªói khi th√™m n√∫t con: " + e.message);
    }
}
function findAllDescendantNodeIds(parentNodeId, allNodes) {
    let descendantIds = [];
    const directChildren = allNodes.filter(node => node.parentId === parentNodeId);
    for (const child of directChildren) {
        descendantIds.push(child.id);
        descendantIds = descendantIds.concat(findAllDescendantNodeIds(child.id, allNodes)); // Recursively find children of children
    }
    return descendantIds;
}
async function deleteNodeLogic(nodeToDelete) {
    if (!nodeToDelete || !currentMindMapId || !db) return;
    const nodeId = nodeToDelete.id();
    const konvaTextNode = nodeToDelete.findOne('.nodeTextContent');
    const nodeText = konvaTextNode ? (nodeToDelete.getAttr('fullTextData') || "N√∫t kh√¥ng t√™n") : "N√∫t kh√¥ng t√™n"; // Use full text for confirm
    const nodeTextPreview = nodeText.substring(0,30) + (nodeText.length > 30 ? "..." : "");

    if (window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a n√∫t "${nodeTextPreview}" v√† T·∫§T C·∫¢ c√°c n√∫t con c·ªßa n√≥ kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.`)) {
        try {
            console.log(`Attempting to delete node: ${nodeId} (${nodeTextPreview})`); // Debug log
            const descendantIds = findAllDescendantNodeIds(nodeId, allNodesDataForCurrentMap);
            const allIdsToDelete = [nodeId, ...descendantIds];
            console.log("All nodes to delete:", allIdsToDelete); // Debug log

            const batch = writeBatch(db);
            allIdsToDelete.forEach(id => {
                batch.delete(doc(db, "nodes", id));
            });
            await batch.commit();
            console.log("Nodes deleted successfully from Firestore."); // Debug log

            // Reset selection if the deleted node or one of its descendants was selected
            if (selectedKonvaNode && allIdsToDelete.includes(selectedKonvaNode.id())) {
                selectedKonvaNode = null;
                if(nodeStylePanel) hideElement(nodeStylePanel);
            }
            if (rightClickedKonvaNode && allIdsToDelete.includes(rightClickedKonvaNode.id())) {
                rightClickedKonvaNode = null;
            }
            // Firestore onSnapshot will handle re-rendering
        } catch (e) {
            console.error("Error deleting node and descendants:", e);
            alert("L·ªói khi x√≥a n√∫t: " + e.message);
        }
    }
}
function handleGlobalKeyDown(e) {
    if (isEditingText) return; // Prevent global key actions if a modal (like edit node) is active

    // If context menu is open, Escape should close it
    if (contextMenu && !contextMenu.classList.contains('hidden')) {
        if (e.key === 'Escape') {
            hideContextMenu();
        }
        return; // Don't process other keys if context menu is open
    }

    // If no node is selected, only allow arrow keys for stage panning
    if (!selectedKonvaNode && !['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
        // Allow these keys even if no node is selected for other potential global shortcuts (none currently)
        if (e.key === 'Tab' || e.key === 'Enter' || e.key === 'Delete' || e.key === 'Backspace') return;
    }

    const KEYBOARD_MOVE_STEP = 10; // Pixels to move node/stage per key press
    switch (e.key) {
        case 'Tab': // Add child to selected node
            if (selectedKonvaNode) {
                e.preventDefault(); // Prevent default tab behavior
                addChildNodeLogic(selectedKonvaNode);
            }
            break;
        case 'Enter': // Edit selected node
            if (selectedKonvaNode) {
                e.preventDefault();
                editTextOnKonvaNode(selectedKonvaNode); // UPDATED call to use modal
            }
            break;
        case 'Delete':
        case 'Backspace': // Delete selected node and its children
            if (selectedKonvaNode) {
                e.preventDefault();
                deleteNodeLogic(selectedKonvaNode);
            }
            break;
        case 'ArrowUp':
        case 'ArrowDown':
        case 'ArrowLeft':
        case 'ArrowRight':
            e.preventDefault(); // Prevent page scrolling
            if (selectedKonvaNode) { // Move selected node
                let newX = selectedKonvaNode.x();
                let newY = selectedKonvaNode.y();
                if (e.key === 'ArrowUp') newY -= KEYBOARD_MOVE_STEP;
                else if (e.key === 'ArrowDown') newY += KEYBOARD_MOVE_STEP;
                else if (e.key === 'ArrowLeft') newX -= KEYBOARD_MOVE_STEP;
                else if (e.key === 'ArrowRight') newX += KEYBOARD_MOVE_STEP;

                // NEW: Apply snap to grid for keyboard movement
                if (isSnapToGridEnabled) {
                    const snappedPos = snapToGrid({ x: newX, y: newY });
                    newX = snappedPos.x;
                    newY = snappedPos.y;
                }

                selectedKonvaNode.position({ x: newX, y: newY });
                currentKonvaLayer.batchDraw();
                // Debounce Firestore update or update on dragend equivalent for keyboard
                if (db) {
                    updateDoc(doc(db, "nodes", selectedKonvaNode.id()), { position: { x: newX, y: newY } })
                        .catch(err => console.error("Error updating node position via keyboard:", err));
                }
            } else if (currentKonvaStage) { // Pan the stage if no node is selected
                let stageX = currentKonvaStage.x();
                let stageY = currentKonvaStage.y();
                // Invert direction for intuitive panning
                if (e.key === 'ArrowUp') stageY += KEYBOARD_MOVE_STEP * 2; // Pan view up = move stage content down
                else if (e.key === 'ArrowDown') stageY -= KEYBOARD_MOVE_STEP * 2;
                else if (e.key === 'ArrowLeft') stageX += KEYBOARD_MOVE_STEP * 2;
                else if (e.key === 'ArrowRight') stageX -= KEYBOARD_MOVE_STEP * 2;
                currentKonvaStage.position({x: stageX, y: stageY });
                currentKonvaStage.batchDraw();
                saveCanvasState(); // Save new stage position
            }
            break;
    }
}

// --- MAIN SCRIPT EXECUTION AFTER DOM IS LOADED ---
window.addEventListener('DOMContentLoaded', () => {
    // Initialize Firebase services
    try {
        app = initializeApp(firebaseConfig);
        auth = getAuth(app);
        db = getFirestore(app);
        // Initialize Firebase AI (Gemini)
        if (typeof getAI === 'function' && typeof GoogleAIBackend === 'function' && typeof getGenerativeModel === 'function') {
            ai = getAI(app, { backend: new GoogleAIBackend() }); // Using default backend
            generativeModel = getGenerativeModel(ai, { model: "gemini-1.5-flash-latest" }); // Specify your desired model
            // console.log("Firebase initialized successfully with AI Logic SDK!");
        } else {
            console.error("Firebase AI SDK components not found. AI features will be disabled.");
            alert("L·ªói: Kh√¥ng th·ªÉ t·∫£i c√°c th√†nh ph·∫ßn AI c·ªßa Firebase. C√°c t√≠nh nƒÉng AI s·∫Ω b·ªã v√¥ hi·ªáu h√≥a.");
        }
    } catch (error) {
        console.error("Firebase initialization error:", error);
        alert("L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase ho·∫∑c AI SDK. Chi ti·∫øt: " + error.message + "\nH√£y ch·∫Øc ch·∫Øn b·∫°n ƒë√£ thay th·∫ø c√°c gi√° tr·ªã placeholder trong firebaseConfig b·∫±ng th√¥ng tin d·ª± √°n Firebase c·ªßa b·∫°n.");
    }

    // Assign DOM elements
    nodeStylePanel = document.getElementById('node-style-panel');
    nodeShapeSelect = document.getElementById('node-shape-select');
    nodeFontFamilySelect = document.getElementById('node-font-family-select');
    nodeFontSizeInput = document.getElementById('node-font-size-input');
    nodeIconSelect = document.getElementById('node-icon-select');
    nodeBgColorInput = document.getElementById('node-bg-color');
    nodeTextColorInput = document.getElementById('node-text-color');
    nodeBorderColorInput = document.getElementById('node-border-color');
    nodeLineColorInput = document.getElementById('node-line-color');
    nodeLineDashSelect = document.getElementById('node-line-dash-select');
    nodeLineWidthInput = document.getElementById('node-line-width');

    contextMenu = document.getElementById('context-menu');
    ctxAddChildButton = document.getElementById('ctx-add-child');
    ctxEditTextButton = document.getElementById('ctx-edit-text');
    ctxViewFullContentButton = document.getElementById('ctx-view-full-content');
    ctxSuggestChildrenButton = document.getElementById('ctx-suggest-children');
    ctxExpandNodeButton = document.getElementById('ctx-expand-node');
    ctxGenerateExamplesButton = document.getElementById('ctx-generate-examples');
    ctxAskAiNodeButton = document.getElementById('ctx-ask-ai-node');
    ctxSummarizeBranchButton = document.getElementById('ctx-summarize-branch');
    ctxGenerateActionPlanButton = document.getElementById('ctx-generate-action-plan');
    ctxGenerateOutlineButton = document.getElementById('ctx-generate-outline');
    ctxOptimizeLayoutButton = document.getElementById('ctx-optimize-layout'); // Assign new button
    ctxDeleteNodeButton = document.getElementById('ctx-delete-node');

    aiLoadingIndicator = document.getElementById('ai-loading-indicator');
    aiResponseModalOverlay = document.getElementById('ai-response-modal-overlay');
    aiResponseModalTitle = document.getElementById('ai-response-modal-title');
    aiResponseModalBody = document.getElementById('ai-response-modal-body');
    aiResponseModalCloseButton = document.getElementById('ai-response-modal-close-button');

    nodeContentModalOverlay = document.getElementById('node-content-modal-overlay');
    nodeContentModalTitle = document.getElementById('node-content-modal-title');
    nodeContentModalBody = document.getElementById('node-content-modal-body');
    nodeContentModalCloseButton = document.getElementById('node-content-modal-close-button');

    editNodeTextModalOverlay = document.getElementById('edit-node-text-modal-overlay');
    editNodeTextModalTitle = document.getElementById('edit-node-text-modal-title');
    editNodeTextarea = document.getElementById('edit-node-textarea');
    editNodeTextModalSaveButton = document.getElementById('edit-node-text-modal-save-button');
    editNodeTextModalCancelButton = document.getElementById('edit-node-text-modal-cancel-button');
    editNodeTextModalCloseButton = document.getElementById('edit-node-text-modal-close-button');


    authSection = document.getElementById('auth-section');
    loginForm = document.getElementById('login-form');
    registerForm = document.getElementById('register-form');
    loginEmailInput = document.getElementById('login-email');
    loginPasswordInput = document.getElementById('login-password');
    loginButton = document.getElementById('login-button');
    showRegisterLink = document.getElementById('show-register-link');
    registerEmailInput = document.getElementById('register-email');
    registerPasswordInput = document.getElementById('register-password');
    registerButton = document.getElementById('register-button');
    showLoginLink = document.getElementById('show-login-link');
    loginErrorMsg = document.getElementById('login-error');
    registerErrorMsg = document.getElementById('register-error');


    mainAppSection = document.getElementById('main-app-section');
    mainAppTitle = document.getElementById('main-app-title');
    userEmailDisplay = document.getElementById('user-email-display');
    logoutButton = document.getElementById('logout-button');


    mindmapManagementView = document.getElementById('mindmap-management-view');
    newMindmapTitleInput = document.getElementById('new-mindmap-title-input');
    createMindmapButton = document.getElementById('create-mindmap-button');
    normalMindmapListUl = document.getElementById('normal-mindmap-list');
    normalMindmapListLoading = document.getElementById('normal-mindmap-list-loading');

    aiMindmapListUl = document.getElementById('ai-mindmap-list');
    aiMindmapListLoading = document.getElementById('ai-mindmap-list-loading');


    canvasView = document.getElementById('canvas-view');
    backToMapsListButton = document.getElementById('back-to-maps-list-button');
    currentMindmapTitleDisplay = document.getElementById('current-mindmap-title-display');
    addChildNodeButton = document.getElementById('add-child-node-button');
    deleteNodeButton = document.getElementById('delete-node-button');
    zoomInButton = document.getElementById('zoom-in-button');
    zoomOutButton = document.getElementById('zoom-out-button');
    resetZoomButton = document.getElementById('reset-zoom-button');
    konvaContainer = document.getElementById('konva-container');
    konvaContainerLoading = document.getElementById('konva-container-loading');

    aiTextInput = document.getElementById('ai-text-input');
    generateMindmapFromTextButton = document.getElementById('generate-mindmap-from-text-button');
    aiMindmapTitleInput = document.getElementById('ai-mindmap-title-input');

    toggleGridCheckbox = document.getElementById('toggle-grid');
    toggleSnapToGridCheckbox = document.getElementById('toggle-snap-to-grid');
    gridSizeInput = document.getElementById('grid-size-input');


    // Setup event listeners
    if (aiResponseModalCloseButton) { aiResponseModalCloseButton.addEventListener('click', closeAiResponseModal); }
    if (aiResponseModalOverlay) { aiResponseModalOverlay.addEventListener('click', function(event) { if (event.target === aiResponseModalOverlay) closeAiResponseModal(); }); }
    if (nodeContentModalCloseButton) { nodeContentModalCloseButton.addEventListener('click', closeNodeContentModal); }
    if (nodeContentModalOverlay) { nodeContentModalOverlay.addEventListener('click', function(event) { if (event.target === nodeContentModalOverlay) closeNodeContentModal(); });}

    if (editNodeTextModalSaveButton) { editNodeTextModalSaveButton.addEventListener('click', handleSaveNodeTextFromModal); }
    if (editNodeTextModalCancelButton) { editNodeTextModalCancelButton.addEventListener('click', closeEditNodeModal); }
    if (editNodeTextModalCloseButton) { editNodeTextModalCloseButton.addEventListener('click', closeEditNodeModal); }
    if (editNodeTextarea) {
        editNodeTextarea.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && e.ctrlKey) {
                e.preventDefault();
                handleSaveNodeTextFromModal();
            } else if (e.key === 'Escape') {
                e.preventDefault();
                closeEditNodeModal();
            }
        });
    }


    if (showRegisterLink) { showRegisterLink.addEventListener('click', (e) => { e.preventDefault(); hideElement(loginForm); showElement(registerForm); clearAuthError(loginErrorMsg); }); }
    if (showLoginLink) { showLoginLink.addEventListener('click', (e) => { e.preventDefault(); hideElement(registerForm); showElement(loginForm); clearAuthError(registerErrorMsg); }); }
    if (registerButton) { registerButton.addEventListener('click', handleRegister); }
    if (loginButton) { loginButton.addEventListener('click', handleLogin); }
    if (logoutButton) { logoutButton.addEventListener('click', handleLogout); }

    if (auth) { onAuthStateChanged(auth, authStateChangedHandler); }

    if (backToMapsListButton) { backToMapsListButton.addEventListener('click', showMindmapManagementView); }

    if (nodeShapeSelect) nodeShapeSelect.addEventListener('change', (e) => handleNodeStyleChange('shape', e.target.value));
    if (nodeFontFamilySelect) nodeFontFamilySelect.addEventListener('change', (e) => handleNodeStyleChange('fontFamily', e.target.value));
    if (nodeFontSizeInput) nodeFontSizeInput.addEventListener('input', (e) => handleNodeStyleChange('fontSize', e.target.value));
    if (nodeIconSelect) nodeIconSelect.addEventListener('change', (e) => handleNodeStyleChange('icon', e.target.value));
    if (nodeBgColorInput) nodeBgColorInput.addEventListener('input', (e) => handleNodeStyleChange('backgroundColor', e.target.value));
    if (nodeTextColorInput) nodeTextColorInput.addEventListener('input', (e) => handleNodeStyleChange('textColor', e.target.value));
    if (nodeBorderColorInput) nodeBorderColorInput.addEventListener('input', (e) => handleNodeStyleChange('borderColor', e.target.value));
    if (nodeLineColorInput) nodeLineColorInput.addEventListener('input', (e) => handleNodeStyleChange('lineColor', e.target.value));
    if (nodeLineDashSelect) nodeLineDashSelect.addEventListener('change', (e) => handleNodeStyleChange('lineDash', e.target.value));
    if (nodeLineWidthInput) nodeLineWidthInput.addEventListener('input', (e) => handleNodeStyleChange('lineWidth', e.target.value));


    if (createMindmapButton) { createMindmapButton.addEventListener('click', handleCreateMindmap); }

    if (generateMindmapFromTextButton) {
        generateMindmapFromTextButton.addEventListener('click', handleGenerateMindmapFromText);
    }

    if (toggleGridCheckbox) {
        toggleGridCheckbox.addEventListener('change', (e) => {
            isGridVisible = e.target.checked;
            updateGrid();
            saveCanvasState();
        });
    }
    if (toggleSnapToGridCheckbox) {
        toggleSnapToGridCheckbox.addEventListener('change', (e) => {
            isSnapToGridEnabled = e.target.checked;
            saveCanvasState();
        });
    }
    if (gridSizeInput) {
        gridSizeInput.addEventListener('input', (e) => {
            gridSize = parseInt(e.target.value, 10);
            if (isNaN(gridSize) || gridSize < 10) gridSize = 10;
            if (isGridVisible) updateGrid();
            saveCanvasState();
        });
    }


    // Context Menu item listeners
    if (ctxAddChildButton) {
        ctxAddChildButton.addEventListener('click', async () => {
            let targetNode = rightClickedKonvaNode || selectedKonvaNode;
            if (!targetNode || !currentMindMapId || !db) {
                alert("Kh√¥ng th·ªÉ th√™m n√∫t con. Vui l√≤ng th·ª≠ l·∫°i.");
                hideContextMenu(); return;
            }
            await addChildNodeLogic(targetNode);
            hideContextMenu();
        });
    }
    if (ctxEditTextButton) {
        ctxEditTextButton.addEventListener('click', () => {
            let targetNode = rightClickedKonvaNode || selectedKonvaNode;
            if (targetNode) {
                editTextOnKonvaNode(targetNode);
            }
            hideContextMenu();
        });
    }
    if (ctxViewFullContentButton) {
        ctxViewFullContentButton.addEventListener('click', () => {
            const targetNode = rightClickedKonvaNode || selectedKonvaNode;
            if (targetNode) {
                const fullText = targetNode.getAttr('fullTextData');
                if (fullText) { openNodeContentModal(fullText.substring(0,30)+"...", fullText); }
                else { alert("Kh√¥ng c√≥ n·ªôi dung ƒë·∫ßy ƒë·ªß ƒë·ªÉ hi·ªÉn th·ªã."); }
            } else { alert("Vui l√≤ng ch·ªçn m·ªôt n√∫t ƒë·ªÉ xem n·ªôi dung."); }
            hideContextMenu();
        });
    }
    if (ctxSuggestChildrenButton) {
        ctxSuggestChildrenButton.addEventListener('click', async () => {
            let targetNodeForAI = rightClickedKonvaNode || selectedKonvaNode;
            if (targetNodeForAI) { await suggestChildNodesWithAI(targetNodeForAI); }
            else { alert("Vui l√≤ng ch·ªçn m·ªôt n√∫t cha ƒë·ªÉ AI g·ª£i √Ω n√∫t con."); hideContextMenu(); }
        });
    }
    if (ctxExpandNodeButton) {
        ctxExpandNodeButton.addEventListener('click', async () => {
            let targetNodeForAI = rightClickedKonvaNode || selectedKonvaNode;
            if (targetNodeForAI) { await expandNodeWithAI(targetNodeForAI); }
            else { alert("Vui l√≤ng ch·ªçn m·ªôt n√∫t ƒë·ªÉ AI m·ªü r·ªông √Ω t∆∞·ªüng."); hideContextMenu(); }
        });
    }
    if (ctxGenerateExamplesButton) {
        ctxGenerateExamplesButton.addEventListener('click', async () => {
            let targetNodeForAI = rightClickedKonvaNode || selectedKonvaNode;
            if (targetNodeForAI) { await generateExamplesWithAI(targetNodeForAI); }
            else { alert("Vui l√≤ng ch·ªçn m·ªôt n√∫t ƒë·ªÉ AI t·∫°o v√≠ d·ª•."); hideContextMenu(); }
        });
    }
    if (ctxAskAiNodeButton) {
        ctxAskAiNodeButton.addEventListener('click', async () => {
            let targetNodeForAI = rightClickedKonvaNode || selectedKonvaNode;
            if (targetNodeForAI) { await askAIAboutNode(targetNodeForAI); }
            else { alert("Vui l√≤ng ch·ªçn m·ªôt n√∫t ƒë·ªÉ ƒë·∫∑t c√¢u h·ªèi cho AI."); hideContextMenu(); }
        });
    }
    if (ctxSummarizeBranchButton) {
        ctxSummarizeBranchButton.addEventListener('click', async () => {
            let targetNodeForSummarize = rightClickedKonvaNode || selectedKonvaNode;
            if (targetNodeForSummarize) { await summarizeBranchWithAI(targetNodeForSummarize); }
            else { alert("Vui l√≤ng ch·ªçn m·ªôt n√∫t g·ªëc c·ªßa nh√°nh ƒë·ªÉ AI t√≥m t·∫Øt."); hideContextMenu(); }
        });
    }
    if (ctxGenerateActionPlanButton) {
        ctxGenerateActionPlanButton.addEventListener('click', async () => {
            let targetNodeForPlan = rightClickedKonvaNode || selectedKonvaNode;
            if (!targetNodeForPlan) {
                alert("Vui l√≤ng ch·ªçn m·ªôt n√∫t ƒë·ªÉ AI t·∫°o k·∫ø ho·∫°ch h√†nh ƒë·ªông.");
                hideContextMenu();
                return;
            }
            await generateActionPlanWithAI(targetNodeForPlan);
            hideContextMenu();
        });
    }
    if (ctxGenerateOutlineButton) {
        console.log("Assigning click listener to ctxGenerateOutlineButton.");
        ctxGenerateOutlineButton.addEventListener('click', async () => {
            console.log("ctxGenerateOutlineButton clicked.");
            let targetNodeForOutline = rightClickedKonvaNode || selectedKonvaNode;
            if (!targetNodeForOutline) {
                alert("Vui l√≤ng ch·ªçn m·ªôt n√∫t ƒë·ªÉ AI t·∫°o d√†n √Ω.");
                hideContextMenu();
                return;
            }
            await generateOutlineWithAI(targetNodeForOutline);
            hideContextMenu();
        });
    }
    if (ctxOptimizeLayoutButton) {
        console.log("Assigning click listener to ctxOptimizeLayoutButton.");
        ctxOptimizeLayoutButton.addEventListener('click', async () => {
            console.log("ctxOptimizeLayoutButton clicked.");
            let targetNodeForLayout = rightClickedKonvaNode || selectedKonvaNode;
            // If no node is selected, optimize the entire map. Otherwise, optimize the branch.
            await optimizeLayoutWithAI(targetNodeForLayout ? targetNodeForLayout.id() : null);
            hideContextMenu();
        });
    }
    if (ctxDeleteNodeButton) {
        ctxDeleteNodeButton.addEventListener('click', async () => {
            console.log("Delete Node button clicked in context menu.");
            let targetNode = rightClickedKonvaNode || selectedKonvaNode;
            if (!targetNode || !currentMindMapId || !db) {
                 alert("Kh√¥ng th·ªÉ x√≥a n√∫t. Vui l√≤ng th·ª≠ l·∫°i."); hideContextMenu(); return;
            }
            await deleteNodeLogic(targetNode);
            hideContextMenu();
        });
    }


    // Global click listener to hide context menu if clicked outside
    document.addEventListener('click', function (e) {
        if (contextMenu && !contextMenu.classList.contains('hidden')) {
            if (!contextMenu.contains(e.target) && e.target !== currentKonvaStage && !e.target.hasName?.('mindmapNodeGroup') && !e.target.getParent?.()?.hasName?.('mindmapNodeGroup')) {
                 hideContextMenu();
            }
        }
    });

    // Toolbar button listeners
     if (addChildNodeButton) {
        addChildNodeButton.addEventListener('click', async () => {
            if (!selectedKonvaNode) { alert("Vui l√≤ng ch·ªçn m·ªôt n√∫t cha ƒë·ªÉ th√™m n√∫t con."); return; }
            await addChildNodeLogic(selectedKonvaNode);
        });
    }
    if (deleteNodeButton) {
        deleteNodeButton.addEventListener('click', async () => {
            if (!selectedKonvaNode) { alert("Vui l√≤ng ch·ªçn m·ªôt n√∫t ƒë·ªÉ x√≥a."); return; }
            await deleteNodeLogic(selectedKonvaNode);
        });
    }
    if(zoomInButton) { zoomInButton.addEventListener('click', () => { if (!currentKonvaStage) return; const oldScale = currentKonvaStage.scaleX(); currentKonvaStage.scale({ x: oldScale * scaleBy, y: oldScale * scaleBy }); currentKonvaStage.batchDraw(); saveCanvasState(); }); }
    if(zoomOutButton) { zoomOutButton.addEventListener('click', () => { if (!currentKonvaStage) return; const oldScale = currentKonvaStage.scaleX(); currentKonvaStage.scale({ x: oldScale / scaleBy, y: oldScale / scaleBy }); currentKonvaStage.batchDraw(); saveCanvasState(); }); }
    if(resetZoomButton) { resetZoomButton.addEventListener('click', () => { if (!currentKonvaStage) return; currentKonvaStage.scale({ x: 1, y: 1 }); currentKonvaStage.position({ x: 0, y: 0 }); currentKonvaStage.batchDraw(); saveCanvasState(); }); }


    // Resize Konva stage when window resizes
    window.addEventListener('resize', () => {
        if (currentKonvaStage && konvaContainer && konvaContainer.offsetParent !== null) { // Check if canvas is visible
            const newWidth = konvaContainer.clientWidth;
            const newHeight = konvaContainer.clientHeight;
            currentKonvaStage.width(newWidth);
            currentKonvaStage.height(newHeight);
            updateGrid(); // Redraw grid on resize
        }
    });

}); // End of DOMContentLoaded
